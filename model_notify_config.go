/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotifyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyConfig{}

// NotifyConfig struct for NotifyConfig
type NotifyConfig struct {
	OriginStatusCodes []string `json:"origin_status_codes,omitempty"`
	Period *string `json:"period,omitempty"`
	SlackWebhook *string `json:"slack_webhook,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotifyConfig NotifyConfig

// NewNotifyConfig instantiates a new NotifyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyConfig() *NotifyConfig {
	this := NotifyConfig{}
	var period string = "60"
	this.Period = &period
	var slackWebhook string = ""
	this.SlackWebhook = &slackWebhook
	return &this
}

// NewNotifyConfigWithDefaults instantiates a new NotifyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyConfigWithDefaults() *NotifyConfig {
	this := NotifyConfig{}
	var period string = "60"
	this.Period = &period
	var slackWebhook string = ""
	this.SlackWebhook = &slackWebhook
	return &this
}

// GetOriginStatusCodes returns the OriginStatusCodes field value if set, zero value otherwise.
func (o *NotifyConfig) GetOriginStatusCodes() []string {
	if o == nil || IsNil(o.OriginStatusCodes) {
		var ret []string
		return ret
	}
	return o.OriginStatusCodes
}

// GetOriginStatusCodesOk returns a tuple with the OriginStatusCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyConfig) GetOriginStatusCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.OriginStatusCodes) {
		return nil, false
	}
	return o.OriginStatusCodes, true
}

// HasOriginStatusCodes returns a boolean if a field has been set.
func (o *NotifyConfig) HasOriginStatusCodes() bool {
	if o != nil && !IsNil(o.OriginStatusCodes) {
		return true
	}

	return false
}

// SetOriginStatusCodes gets a reference to the given []string and assigns it to the OriginStatusCodes field.
func (o *NotifyConfig) SetOriginStatusCodes(v []string) {
	o.OriginStatusCodes = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *NotifyConfig) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyConfig) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *NotifyConfig) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *NotifyConfig) SetPeriod(v string) {
	o.Period = &v
}

// GetSlackWebhook returns the SlackWebhook field value if set, zero value otherwise.
func (o *NotifyConfig) GetSlackWebhook() string {
	if o == nil || IsNil(o.SlackWebhook) {
		var ret string
		return ret
	}
	return *o.SlackWebhook
}

// GetSlackWebhookOk returns a tuple with the SlackWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyConfig) GetSlackWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.SlackWebhook) {
		return nil, false
	}
	return o.SlackWebhook, true
}

// HasSlackWebhook returns a boolean if a field has been set.
func (o *NotifyConfig) HasSlackWebhook() bool {
	if o != nil && !IsNil(o.SlackWebhook) {
		return true
	}

	return false
}

// SetSlackWebhook gets a reference to the given string and assigns it to the SlackWebhook field.
func (o *NotifyConfig) SetSlackWebhook(v string) {
	o.SlackWebhook = &v
}

func (o NotifyConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginStatusCodes) {
		toSerialize["origin_status_codes"] = o.OriginStatusCodes
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.SlackWebhook) {
		toSerialize["slack_webhook"] = o.SlackWebhook
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotifyConfig) UnmarshalJSON(data []byte) (err error) {
	varNotifyConfig := _NotifyConfig{}

	err = json.Unmarshal(data, &varNotifyConfig)

	if err != nil {
		return err
	}

	*o = NotifyConfig(varNotifyConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "origin_status_codes")
		delete(additionalProperties, "period")
		delete(additionalProperties, "slack_webhook")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotifyConfig struct {
	value *NotifyConfig
	isSet bool
}

func (v NullableNotifyConfig) Get() *NotifyConfig {
	return v.value
}

func (v *NullableNotifyConfig) Set(val *NotifyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyConfig(val *NotifyConfig) *NullableNotifyConfig {
	return &NullableNotifyConfig{value: val, isSet: true}
}

func (v NullableNotifyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


