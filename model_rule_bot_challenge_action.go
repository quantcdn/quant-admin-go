/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quantadmingo

import (
	"encoding/json"
	"fmt"
)

// checks if the RuleBotChallengeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleBotChallengeAction{}

// RuleBotChallengeAction struct for RuleBotChallengeAction
type RuleBotChallengeAction struct {
	BotChallengeBody string `json:"bot_challenge_body"`
	BotChallengeStatusCode int32 `json:"bot_challenge_status_code"`
	AdditionalProperties map[string]interface{}
}

type _RuleBotChallengeAction RuleBotChallengeAction

// NewRuleBotChallengeAction instantiates a new RuleBotChallengeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleBotChallengeAction(botChallengeBody string, botChallengeStatusCode int32) *RuleBotChallengeAction {
	this := RuleBotChallengeAction{}
	this.BotChallengeBody = botChallengeBody
	this.BotChallengeStatusCode = botChallengeStatusCode
	return &this
}

// NewRuleBotChallengeActionWithDefaults instantiates a new RuleBotChallengeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleBotChallengeActionWithDefaults() *RuleBotChallengeAction {
	this := RuleBotChallengeAction{}
	var botChallengeStatusCode int32 = 200
	this.BotChallengeStatusCode = botChallengeStatusCode
	return &this
}

// GetBotChallengeBody returns the BotChallengeBody field value
func (o *RuleBotChallengeAction) GetBotChallengeBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BotChallengeBody
}

// GetBotChallengeBodyOk returns a tuple with the BotChallengeBody field value
// and a boolean to check if the value has been set.
func (o *RuleBotChallengeAction) GetBotChallengeBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BotChallengeBody, true
}

// SetBotChallengeBody sets field value
func (o *RuleBotChallengeAction) SetBotChallengeBody(v string) {
	o.BotChallengeBody = v
}

// GetBotChallengeStatusCode returns the BotChallengeStatusCode field value
func (o *RuleBotChallengeAction) GetBotChallengeStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BotChallengeStatusCode
}

// GetBotChallengeStatusCodeOk returns a tuple with the BotChallengeStatusCode field value
// and a boolean to check if the value has been set.
func (o *RuleBotChallengeAction) GetBotChallengeStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BotChallengeStatusCode, true
}

// SetBotChallengeStatusCode sets field value
func (o *RuleBotChallengeAction) SetBotChallengeStatusCode(v int32) {
	o.BotChallengeStatusCode = v
}

func (o RuleBotChallengeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleBotChallengeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bot_challenge_body"] = o.BotChallengeBody
	toSerialize["bot_challenge_status_code"] = o.BotChallengeStatusCode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleBotChallengeAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bot_challenge_body",
		"bot_challenge_status_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleBotChallengeAction := _RuleBotChallengeAction{}

	err = json.Unmarshal(data, &varRuleBotChallengeAction)

	if err != nil {
		return err
	}

	*o = RuleBotChallengeAction(varRuleBotChallengeAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bot_challenge_body")
		delete(additionalProperties, "bot_challenge_status_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleBotChallengeAction struct {
	value *RuleBotChallengeAction
	isSet bool
}

func (v NullableRuleBotChallengeAction) Get() *RuleBotChallengeAction {
	return v.value
}

func (v *NullableRuleBotChallengeAction) Set(val *RuleBotChallengeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleBotChallengeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleBotChallengeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleBotChallengeAction(val *RuleBotChallengeAction) *NullableRuleBotChallengeAction {
	return &NullableRuleBotChallengeAction{value: val, isSet: true}
}

func (v NullableRuleBotChallengeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleBotChallengeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


