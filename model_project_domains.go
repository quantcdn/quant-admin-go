/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectDomains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectDomains{}

// ProjectDomains struct for ProjectDomains
type ProjectDomains struct {
	Domain *string `json:"domain,omitempty"`
	DnsEngaged *int32 `json:"dns_engaged,omitempty"`
}

// NewProjectDomains instantiates a new ProjectDomains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectDomains() *ProjectDomains {
	this := ProjectDomains{}
	return &this
}

// NewProjectDomainsWithDefaults instantiates a new ProjectDomains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectDomainsWithDefaults() *ProjectDomains {
	this := ProjectDomains{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ProjectDomains) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectDomains) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ProjectDomains) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ProjectDomains) SetDomain(v string) {
	o.Domain = &v
}

// GetDnsEngaged returns the DnsEngaged field value if set, zero value otherwise.
func (o *ProjectDomains) GetDnsEngaged() int32 {
	if o == nil || IsNil(o.DnsEngaged) {
		var ret int32
		return ret
	}
	return *o.DnsEngaged
}

// GetDnsEngagedOk returns a tuple with the DnsEngaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectDomains) GetDnsEngagedOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsEngaged) {
		return nil, false
	}
	return o.DnsEngaged, true
}

// HasDnsEngaged returns a boolean if a field has been set.
func (o *ProjectDomains) HasDnsEngaged() bool {
	if o != nil && !IsNil(o.DnsEngaged) {
		return true
	}

	return false
}

// SetDnsEngaged gets a reference to the given int32 and assigns it to the DnsEngaged field.
func (o *ProjectDomains) SetDnsEngaged(v int32) {
	o.DnsEngaged = &v
}

func (o ProjectDomains) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectDomains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DnsEngaged) {
		toSerialize["dns_engaged"] = o.DnsEngaged
	}
	return toSerialize, nil
}

type NullableProjectDomains struct {
	value *ProjectDomains
	isSet bool
}

func (v NullableProjectDomains) Get() *ProjectDomains {
	return v.value
}

func (v *NullableProjectDomains) Set(val *ProjectDomains) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectDomains) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectDomains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectDomains(val *ProjectDomains) *NullableProjectDomains {
	return &NullableProjectDomains{value: val, isSet: true}
}

func (v NullableProjectDomains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectDomains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


