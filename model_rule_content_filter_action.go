/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quantadmingo

import (
	"encoding/json"
	"fmt"
)

// checks if the RuleContentFilterAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleContentFilterAction{}

// RuleContentFilterAction struct for RuleContentFilterAction
type RuleContentFilterAction struct {
	ContentFilterBody string `json:"content_filter_body"`
	ContentFilterStatusCode int32 `json:"content_filter_status_code"`
	AdditionalProperties map[string]interface{}
}

type _RuleContentFilterAction RuleContentFilterAction

// NewRuleContentFilterAction instantiates a new RuleContentFilterAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleContentFilterAction(contentFilterBody string, contentFilterStatusCode int32) *RuleContentFilterAction {
	this := RuleContentFilterAction{}
	this.ContentFilterBody = contentFilterBody
	this.ContentFilterStatusCode = contentFilterStatusCode
	return &this
}

// NewRuleContentFilterActionWithDefaults instantiates a new RuleContentFilterAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleContentFilterActionWithDefaults() *RuleContentFilterAction {
	this := RuleContentFilterAction{}
	var contentFilterStatusCode int32 = 200
	this.ContentFilterStatusCode = contentFilterStatusCode
	return &this
}

// GetContentFilterBody returns the ContentFilterBody field value
func (o *RuleContentFilterAction) GetContentFilterBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentFilterBody
}

// GetContentFilterBodyOk returns a tuple with the ContentFilterBody field value
// and a boolean to check if the value has been set.
func (o *RuleContentFilterAction) GetContentFilterBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentFilterBody, true
}

// SetContentFilterBody sets field value
func (o *RuleContentFilterAction) SetContentFilterBody(v string) {
	o.ContentFilterBody = v
}

// GetContentFilterStatusCode returns the ContentFilterStatusCode field value
func (o *RuleContentFilterAction) GetContentFilterStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContentFilterStatusCode
}

// GetContentFilterStatusCodeOk returns a tuple with the ContentFilterStatusCode field value
// and a boolean to check if the value has been set.
func (o *RuleContentFilterAction) GetContentFilterStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentFilterStatusCode, true
}

// SetContentFilterStatusCode sets field value
func (o *RuleContentFilterAction) SetContentFilterStatusCode(v int32) {
	o.ContentFilterStatusCode = v
}

func (o RuleContentFilterAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleContentFilterAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content_filter_body"] = o.ContentFilterBody
	toSerialize["content_filter_status_code"] = o.ContentFilterStatusCode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleContentFilterAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content_filter_body",
		"content_filter_status_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleContentFilterAction := _RuleContentFilterAction{}

	err = json.Unmarshal(data, &varRuleContentFilterAction)

	if err != nil {
		return err
	}

	*o = RuleContentFilterAction(varRuleContentFilterAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content_filter_body")
		delete(additionalProperties, "content_filter_status_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleContentFilterAction struct {
	value *RuleContentFilterAction
	isSet bool
}

func (v NullableRuleContentFilterAction) Get() *RuleContentFilterAction {
	return v.value
}

func (v *NullableRuleContentFilterAction) Set(val *RuleContentFilterAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleContentFilterAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleContentFilterAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleContentFilterAction(val *RuleContentFilterAction) *NullableRuleContentFilterAction {
	return &NullableRuleContentFilterAction{value: val, isSet: true}
}

func (v NullableRuleContentFilterAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleContentFilterAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


