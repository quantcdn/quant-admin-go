/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganisationsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganisationsData{}

// OrganisationsData struct for OrganisationsData
type OrganisationsData struct {
	Organisations []Organisation `json:"organisations,omitempty"`
}

// NewOrganisationsData instantiates a new OrganisationsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganisationsData() *OrganisationsData {
	this := OrganisationsData{}
	return &this
}

// NewOrganisationsDataWithDefaults instantiates a new OrganisationsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganisationsDataWithDefaults() *OrganisationsData {
	this := OrganisationsData{}
	return &this
}

// GetOrganisations returns the Organisations field value if set, zero value otherwise.
func (o *OrganisationsData) GetOrganisations() []Organisation {
	if o == nil || IsNil(o.Organisations) {
		var ret []Organisation
		return ret
	}
	return o.Organisations
}

// GetOrganisationsOk returns a tuple with the Organisations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganisationsData) GetOrganisationsOk() ([]Organisation, bool) {
	if o == nil || IsNil(o.Organisations) {
		return nil, false
	}
	return o.Organisations, true
}

// HasOrganisations returns a boolean if a field has been set.
func (o *OrganisationsData) HasOrganisations() bool {
	if o != nil && !IsNil(o.Organisations) {
		return true
	}

	return false
}

// SetOrganisations gets a reference to the given []Organisation and assigns it to the Organisations field.
func (o *OrganisationsData) SetOrganisations(v []Organisation) {
	o.Organisations = v
}

func (o OrganisationsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganisationsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organisations) {
		toSerialize["organisations"] = o.Organisations
	}
	return toSerialize, nil
}

type NullableOrganisationsData struct {
	value *OrganisationsData
	isSet bool
}

func (v NullableOrganisationsData) Get() *OrganisationsData {
	return v.value
}

func (v *NullableOrganisationsData) Set(val *OrganisationsData) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganisationsData) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganisationsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganisationsData(val *OrganisationsData) *NullableOrganisationsData {
	return &NullableOrganisationsData{value: val, isSet: true}
}

func (v NullableOrganisationsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganisationsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


