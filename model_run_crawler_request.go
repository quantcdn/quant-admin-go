/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunCrawlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunCrawlerRequest{}

// RunCrawlerRequest struct for RunCrawlerRequest
type RunCrawlerRequest struct {
	// Optionally provide manual URLs to crawl. Full crawl will run otherwise.
	Urls []string `json:"urls,omitempty"`
}

// NewRunCrawlerRequest instantiates a new RunCrawlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunCrawlerRequest() *RunCrawlerRequest {
	this := RunCrawlerRequest{}
	return &this
}

// NewRunCrawlerRequestWithDefaults instantiates a new RunCrawlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunCrawlerRequestWithDefaults() *RunCrawlerRequest {
	this := RunCrawlerRequest{}
	return &this
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *RunCrawlerRequest) GetUrls() []string {
	if o == nil || IsNil(o.Urls) {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCrawlerRequest) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *RunCrawlerRequest) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *RunCrawlerRequest) SetUrls(v []string) {
	o.Urls = v
}

func (o RunCrawlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunCrawlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	return toSerialize, nil
}

type NullableRunCrawlerRequest struct {
	value *RunCrawlerRequest
	isSet bool
}

func (v NullableRunCrawlerRequest) Get() *RunCrawlerRequest {
	return v.value
}

func (v *NullableRunCrawlerRequest) Set(val *RunCrawlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunCrawlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunCrawlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunCrawlerRequest(val *RunCrawlerRequest) *NullableRunCrawlerRequest {
	return &NullableRunCrawlerRequest{value: val, isSet: true}
}

func (v NullableRunCrawlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunCrawlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


