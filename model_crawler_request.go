/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quantadmingo

import (
	"encoding/json"
	"fmt"
)

// checks if the CrawlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrawlerRequest{}

// CrawlerRequest struct for CrawlerRequest
type CrawlerRequest struct {
	Name *string `json:"name,omitempty"`
	Domain string `json:"domain"`
	BrowserMode *bool `json:"browser_mode,omitempty"`
	Urls []string `json:"urls,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
	Exclude []string `json:"exclude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CrawlerRequest CrawlerRequest

// NewCrawlerRequest instantiates a new CrawlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrawlerRequest(domain string) *CrawlerRequest {
	this := CrawlerRequest{}
	this.Domain = domain
	var browserMode bool = false
	this.BrowserMode = &browserMode
	return &this
}

// NewCrawlerRequestWithDefaults instantiates a new CrawlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrawlerRequestWithDefaults() *CrawlerRequest {
	this := CrawlerRequest{}
	var browserMode bool = false
	this.BrowserMode = &browserMode
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CrawlerRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CrawlerRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CrawlerRequest) SetName(v string) {
	o.Name = &v
}

// GetDomain returns the Domain field value
func (o *CrawlerRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CrawlerRequest) SetDomain(v string) {
	o.Domain = v
}

// GetBrowserMode returns the BrowserMode field value if set, zero value otherwise.
func (o *CrawlerRequest) GetBrowserMode() bool {
	if o == nil || IsNil(o.BrowserMode) {
		var ret bool
		return ret
	}
	return *o.BrowserMode
}

// GetBrowserModeOk returns a tuple with the BrowserMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetBrowserModeOk() (*bool, bool) {
	if o == nil || IsNil(o.BrowserMode) {
		return nil, false
	}
	return o.BrowserMode, true
}

// HasBrowserMode returns a boolean if a field has been set.
func (o *CrawlerRequest) HasBrowserMode() bool {
	if o != nil && !IsNil(o.BrowserMode) {
		return true
	}

	return false
}

// SetBrowserMode gets a reference to the given bool and assigns it to the BrowserMode field.
func (o *CrawlerRequest) SetBrowserMode(v bool) {
	o.BrowserMode = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *CrawlerRequest) GetUrls() []string {
	if o == nil || IsNil(o.Urls) {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *CrawlerRequest) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *CrawlerRequest) SetUrls(v []string) {
	o.Urls = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *CrawlerRequest) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *CrawlerRequest) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *CrawlerRequest) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *CrawlerRequest) GetExclude() []string {
	if o == nil || IsNil(o.Exclude) {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *CrawlerRequest) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *CrawlerRequest) SetExclude(v []string) {
	o.Exclude = v
}

func (o CrawlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrawlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.BrowserMode) {
		toSerialize["browser_mode"] = o.BrowserMode
	}
	if !IsNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CrawlerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrawlerRequest := _CrawlerRequest{}

	err = json.Unmarshal(data, &varCrawlerRequest)

	if err != nil {
		return err
	}

	*o = CrawlerRequest(varCrawlerRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "browser_mode")
		delete(additionalProperties, "urls")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "exclude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCrawlerRequest struct {
	value *CrawlerRequest
	isSet bool
}

func (v NullableCrawlerRequest) Get() *CrawlerRequest {
	return v.value
}

func (v *NullableCrawlerRequest) Set(val *CrawlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCrawlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCrawlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrawlerRequest(val *CrawlerRequest) *NullableCrawlerRequest {
	return &NullableCrawlerRequest{value: val, isSet: true}
}

func (v NullableCrawlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrawlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


