/*
Quant administration API

The Quant administration API provides programmatic access to manage projects within your available organizations. 

API version: 2.0.0
Contact: apiteam@quantcdn.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CrawlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrawlerRequest{}

// CrawlerRequest struct for CrawlerRequest
type CrawlerRequest struct {
	Name *string `json:"name,omitempty"`
	Domain *string `json:"domain,omitempty"`
	BrowserMode *bool `json:"browser_mode,omitempty"`
	UrlList []string `json:"url_list,omitempty"`
	Headers map[string]interface{} `json:"headers,omitempty"`
}

// NewCrawlerRequest instantiates a new CrawlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrawlerRequest() *CrawlerRequest {
	this := CrawlerRequest{}
	return &this
}

// NewCrawlerRequestWithDefaults instantiates a new CrawlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrawlerRequestWithDefaults() *CrawlerRequest {
	this := CrawlerRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CrawlerRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CrawlerRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CrawlerRequest) SetName(v string) {
	o.Name = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *CrawlerRequest) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *CrawlerRequest) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *CrawlerRequest) SetDomain(v string) {
	o.Domain = &v
}

// GetBrowserMode returns the BrowserMode field value if set, zero value otherwise.
func (o *CrawlerRequest) GetBrowserMode() bool {
	if o == nil || IsNil(o.BrowserMode) {
		var ret bool
		return ret
	}
	return *o.BrowserMode
}

// GetBrowserModeOk returns a tuple with the BrowserMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetBrowserModeOk() (*bool, bool) {
	if o == nil || IsNil(o.BrowserMode) {
		return nil, false
	}
	return o.BrowserMode, true
}

// HasBrowserMode returns a boolean if a field has been set.
func (o *CrawlerRequest) HasBrowserMode() bool {
	if o != nil && !IsNil(o.BrowserMode) {
		return true
	}

	return false
}

// SetBrowserMode gets a reference to the given bool and assigns it to the BrowserMode field.
func (o *CrawlerRequest) SetBrowserMode(v bool) {
	o.BrowserMode = &v
}

// GetUrlList returns the UrlList field value if set, zero value otherwise.
func (o *CrawlerRequest) GetUrlList() []string {
	if o == nil || IsNil(o.UrlList) {
		var ret []string
		return ret
	}
	return o.UrlList
}

// GetUrlListOk returns a tuple with the UrlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetUrlListOk() ([]string, bool) {
	if o == nil || IsNil(o.UrlList) {
		return nil, false
	}
	return o.UrlList, true
}

// HasUrlList returns a boolean if a field has been set.
func (o *CrawlerRequest) HasUrlList() bool {
	if o != nil && !IsNil(o.UrlList) {
		return true
	}

	return false
}

// SetUrlList gets a reference to the given []string and assigns it to the UrlList field.
func (o *CrawlerRequest) SetUrlList(v []string) {
	o.UrlList = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *CrawlerRequest) GetHeaders() map[string]interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerRequest) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *CrawlerRequest) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *CrawlerRequest) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

func (o CrawlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrawlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.BrowserMode) {
		toSerialize["browser_mode"] = o.BrowserMode
	}
	if !IsNil(o.UrlList) {
		toSerialize["url_list"] = o.UrlList
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableCrawlerRequest struct {
	value *CrawlerRequest
	isSet bool
}

func (v NullableCrawlerRequest) Get() *CrawlerRequest {
	return v.value
}

func (v *NullableCrawlerRequest) Set(val *CrawlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCrawlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCrawlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrawlerRequest(val *CrawlerRequest) *NullableCrawlerRequest {
	return &NullableCrawlerRequest{value: val, isSet: true}
}

func (v NullableCrawlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrawlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


