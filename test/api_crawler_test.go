/*
QuantCDN Admin API

Testing CrawlerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package quant-admin-go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/quantcdn/quant-admin-go"
)

func Test_quant-admin-go_CrawlerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CrawlerAPIService CrawlerSchedulesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var crawler string

		resp, httpRes, err := apiClient.CrawlerAPI.CrawlerSchedulesCreate(context.Background(), organization, project, crawler).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CrawlerAPIService CrawlerSchedulesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var crawler string
		var schedule string

		resp, httpRes, err := apiClient.CrawlerAPI.CrawlerSchedulesDelete(context.Background(), organization, project, crawler, schedule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CrawlerAPIService CrawlerSchedulesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var crawler string

		resp, httpRes, err := apiClient.CrawlerAPI.CrawlerSchedulesList(context.Background(), organization, project, crawler).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CrawlerAPIService CrawlerSchedulesRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var crawler string
		var schedule string

		resp, httpRes, err := apiClient.CrawlerAPI.CrawlerSchedulesRead(context.Background(), organization, project, crawler, schedule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CrawlerAPIService CrawlerSchedulesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organization string
		var project string
		var crawler string
		var schedule string

		resp, httpRes, err := apiClient.CrawlerAPI.CrawlerSchedulesUpdate(context.Background(), organization, project, crawler, schedule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
