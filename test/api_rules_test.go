/*
Quant administration API

Testing RulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/quantcdn/quant-admin-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_RulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RulesAPIService CreateRuleAuth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleAuth(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService CreateRuleCustomResponse", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleCustomResponse(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService CreateRuleHeaders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleHeaders(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService CreateRuleProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleProxy(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService CreateRuleRedirect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.CreateRuleRedirect(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleAuth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleAuth(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleCustomResponse", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleCustomResponse(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleHeaders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleHeaders(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleProxy(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService DeleteRuleRedirect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.DeleteRuleRedirect(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleAuth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleAuth(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleCustomResponse", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleCustomResponse(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleHeaders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleHeaders(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleProxy(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService GetRuleRedirect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.GetRuleRedirect(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService ListRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string

		resp, httpRes, err := apiClient.RulesAPI.ListRules(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleAuth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleAuth(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleCustomResponse", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleCustomResponse(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleHeaders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleHeaders(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleProxy(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService UpdateRuleRedirect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization string
		var project string
		var rule string

		resp, httpRes, err := apiClient.RulesAPI.UpdateRuleRedirect(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
