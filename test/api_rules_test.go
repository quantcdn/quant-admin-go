/*
Quant administration API

Testing RulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/quantcdn/quant-admin-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_RulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesAuthPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesAuthPost(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesAuthRuleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesAuthRuleDelete(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesAuthRuleGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesAuthRuleGet(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesAuthRulePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesAuthRulePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesCustomResponsePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesCustomResponsePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesCustomResponseRuleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesCustomResponseRuleDelete(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesCustomResponseRuleGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesCustomResponseRuleGet(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesCustomResponseRulePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesCustomResponseRulePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesGet(context.Background(), organization, project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesHeaderPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesHeaderPatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesHeaderRuleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesHeaderRuleDelete(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesHeaderRuleGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesHeaderRuleGet(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesHeaderRulePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesHeaderRulePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesProxyPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesProxyPost(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesProxyRuleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesProxyRuleDelete(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesProxyRuleGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesProxyRuleGet(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesProxyRulePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesProxyRulePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesRedirectPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesRedirectPost(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesRedirectRuleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesRedirectRuleDelete(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesRedirectRuleGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesRedirectRuleGet(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RulesAPIService OrganizationsOrganizationProjectsProjectRulesRedirectRulePatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organization interface{}
		var project interface{}
		var rule interface{}

		resp, httpRes, err := apiClient.RulesAPI.OrganizationsOrganizationProjectsProjectRulesRedirectRulePatch(context.Background(), organization, project, rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
