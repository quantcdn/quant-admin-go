/*
Quant administration API

The Quant administration API provides programmatic access to manage projects within your available organizations. 

API version: 2.0.0
Contact: apiteam@quantcdn.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CrawlersAPIService CrawlersAPI service
type CrawlersAPIService service

type ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest struct {
	ctx context.Context
	ApiService *CrawlersAPIService
	organization interface{}
	project interface{}
	crawler interface{}
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest) Execute() (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteExecute(r)
}

/*
OrganizationsOrganizationProjectsProjectCrawlersCrawlerDelete Delete a crawler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization Organization machine name
 @param project Project machine name
 @param crawler Crawler uuid
 @return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest
*/
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerDelete(ctx context.Context, organization interface{}, project interface{}, crawler interface{}) ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest {
	return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		project: project,
		crawler: crawler,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationProjectsProjectCrawlersGet200Response
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteExecute(r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerDeleteRequest) (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationProjectsProjectCrawlersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrawlersAPIService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization}/projects/{project}/crawlers/{crawler}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"crawler"+"}", url.PathEscape(parameterValueToString(r.crawler, "crawler")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest struct {
	ctx context.Context
	ApiService *CrawlersAPIService
	organization interface{}
	project interface{}
	crawler interface{}
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest) Execute() (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerGetExecute(r)
}

/*
OrganizationsOrganizationProjectsProjectCrawlersCrawlerGet Get crawler details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization Organization machine name
 @param project Project machine name
 @param crawler Crawler uuid
 @return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest
*/
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerGet(ctx context.Context, organization interface{}, project interface{}, crawler interface{}) ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest {
	return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		project: project,
		crawler: crawler,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationProjectsProjectCrawlersGet200Response
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerGetExecute(r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerGetRequest) (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationProjectsProjectCrawlersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrawlersAPIService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization}/projects/{project}/crawlers/{crawler}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"crawler"+"}", url.PathEscape(parameterValueToString(r.crawler, "crawler")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest struct {
	ctx context.Context
	ApiService *CrawlersAPIService
	organization interface{}
	project interface{}
	crawler interface{}
	organizationsOrganizationProjectsProjectCrawlersPostRequest *OrganizationsOrganizationProjectsProjectCrawlersPostRequest
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest) OrganizationsOrganizationProjectsProjectCrawlersPostRequest(organizationsOrganizationProjectsProjectCrawlersPostRequest OrganizationsOrganizationProjectsProjectCrawlersPostRequest) ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest {
	r.organizationsOrganizationProjectsProjectCrawlersPostRequest = &organizationsOrganizationProjectsProjectCrawlersPostRequest
	return r
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest) Execute() (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchExecute(r)
}

/*
OrganizationsOrganizationProjectsProjectCrawlersCrawlerPatch Update crawler details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization Organization machine name
 @param project Project machine name
 @param crawler Crawler uuid
 @return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest
*/
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerPatch(ctx context.Context, organization interface{}, project interface{}, crawler interface{}) ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest {
	return ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		project: project,
		crawler: crawler,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationProjectsProjectCrawlersGet200Response
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchExecute(r ApiOrganizationsOrganizationProjectsProjectCrawlersCrawlerPatchRequest) (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationProjectsProjectCrawlersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrawlersAPIService.OrganizationsOrganizationProjectsProjectCrawlersCrawlerPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization}/projects/{project}/crawlers/{crawler}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"crawler"+"}", url.PathEscape(parameterValueToString(r.crawler, "crawler")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organizationsOrganizationProjectsProjectCrawlersPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest struct {
	ctx context.Context
	ApiService *CrawlersAPIService
	organization interface{}
	project interface{}
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest) Execute() (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrganizationProjectsProjectCrawlersGetExecute(r)
}

/*
OrganizationsOrganizationProjectsProjectCrawlersGet Get crawlers for a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization Organization machine name
 @param project Project machine name
 @return ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest
*/
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersGet(ctx context.Context, organization interface{}, project interface{}) ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest {
	return ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		project: project,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationProjectsProjectCrawlersGet200Response
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersGetExecute(r ApiOrganizationsOrganizationProjectsProjectCrawlersGetRequest) (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationProjectsProjectCrawlersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrawlersAPIService.OrganizationsOrganizationProjectsProjectCrawlersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization}/projects/{project}/crawlers"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest struct {
	ctx context.Context
	ApiService *CrawlersAPIService
	organization interface{}
	project interface{}
	organizationsOrganizationProjectsProjectCrawlersPostRequest *OrganizationsOrganizationProjectsProjectCrawlersPostRequest
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest) OrganizationsOrganizationProjectsProjectCrawlersPostRequest(organizationsOrganizationProjectsProjectCrawlersPostRequest OrganizationsOrganizationProjectsProjectCrawlersPostRequest) ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest {
	r.organizationsOrganizationProjectsProjectCrawlersPostRequest = &organizationsOrganizationProjectsProjectCrawlersPostRequest
	return r
}

func (r ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest) Execute() (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrganizationProjectsProjectCrawlersPostExecute(r)
}

/*
OrganizationsOrganizationProjectsProjectCrawlersPost Create a new crawler for a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organization Organization machine name
 @param project Project machine name
 @return ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest
*/
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersPost(ctx context.Context, organization interface{}, project interface{}) ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest {
	return ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest{
		ApiService: a,
		ctx: ctx,
		organization: organization,
		project: project,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationProjectsProjectCrawlersGet200Response
func (a *CrawlersAPIService) OrganizationsOrganizationProjectsProjectCrawlersPostExecute(r ApiOrganizationsOrganizationProjectsProjectCrawlersPostRequest) (*OrganizationsOrganizationProjectsProjectCrawlersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationProjectsProjectCrawlersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrawlersAPIService.OrganizationsOrganizationProjectsProjectCrawlersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization}/projects/{project}/crawlers"
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organizationsOrganizationProjectsProjectCrawlersPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
