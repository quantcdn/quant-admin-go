/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CrawlerConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrawlerConfigResponse{}

// CrawlerConfigResponse struct for CrawlerConfigResponse
type CrawlerConfigResponse struct {
	Data *CrawlerConfigResponseData `json:"data,omitempty"`
}

// NewCrawlerConfigResponse instantiates a new CrawlerConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrawlerConfigResponse() *CrawlerConfigResponse {
	this := CrawlerConfigResponse{}
	return &this
}

// NewCrawlerConfigResponseWithDefaults instantiates a new CrawlerConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrawlerConfigResponseWithDefaults() *CrawlerConfigResponse {
	this := CrawlerConfigResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CrawlerConfigResponse) GetData() CrawlerConfigResponseData {
	if o == nil || IsNil(o.Data) {
		var ret CrawlerConfigResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerConfigResponse) GetDataOk() (*CrawlerConfigResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CrawlerConfigResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given CrawlerConfigResponseData and assigns it to the Data field.
func (o *CrawlerConfigResponse) SetData(v CrawlerConfigResponseData) {
	o.Data = &v
}

func (o CrawlerConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrawlerConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableCrawlerConfigResponse struct {
	value *CrawlerConfigResponse
	isSet bool
}

func (v NullableCrawlerConfigResponse) Get() *CrawlerConfigResponse {
	return v.value
}

func (v *NullableCrawlerConfigResponse) Set(val *CrawlerConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCrawlerConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCrawlerConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrawlerConfigResponse(val *CrawlerConfigResponse) *NullableCrawlerConfigResponse {
	return &NullableCrawlerConfigResponse{value: val, isSet: true}
}

func (v NullableCrawlerConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrawlerConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


