/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CrawlerSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrawlerSchedule{}

// CrawlerSchedule struct for CrawlerSchedule
type CrawlerSchedule struct {
	Id int32 `json:"id"`
	CrawlerConfigId int32 `json:"crawler_config_id"`
	ProjectId int32 `json:"project_id"`
	CrawlerLastRunId int32 `json:"crawler_last_run_id"`
	ScheduleCronString string `json:"schedule_cron_string"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CrawlerSchedule CrawlerSchedule

// NewCrawlerSchedule instantiates a new CrawlerSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrawlerSchedule(id int32, crawlerConfigId int32, projectId int32, crawlerLastRunId int32, scheduleCronString string) *CrawlerSchedule {
	this := CrawlerSchedule{}
	this.Id = id
	this.CrawlerConfigId = crawlerConfigId
	this.ProjectId = projectId
	this.CrawlerLastRunId = crawlerLastRunId
	this.ScheduleCronString = scheduleCronString
	return &this
}

// NewCrawlerScheduleWithDefaults instantiates a new CrawlerSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrawlerScheduleWithDefaults() *CrawlerSchedule {
	this := CrawlerSchedule{}
	return &this
}

// GetId returns the Id field value
func (o *CrawlerSchedule) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CrawlerSchedule) SetId(v int32) {
	o.Id = v
}

// GetCrawlerConfigId returns the CrawlerConfigId field value
func (o *CrawlerSchedule) GetCrawlerConfigId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CrawlerConfigId
}

// GetCrawlerConfigIdOk returns a tuple with the CrawlerConfigId field value
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetCrawlerConfigIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CrawlerConfigId, true
}

// SetCrawlerConfigId sets field value
func (o *CrawlerSchedule) SetCrawlerConfigId(v int32) {
	o.CrawlerConfigId = v
}

// GetProjectId returns the ProjectId field value
func (o *CrawlerSchedule) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CrawlerSchedule) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetCrawlerLastRunId returns the CrawlerLastRunId field value
func (o *CrawlerSchedule) GetCrawlerLastRunId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CrawlerLastRunId
}

// GetCrawlerLastRunIdOk returns a tuple with the CrawlerLastRunId field value
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetCrawlerLastRunIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CrawlerLastRunId, true
}

// SetCrawlerLastRunId sets field value
func (o *CrawlerSchedule) SetCrawlerLastRunId(v int32) {
	o.CrawlerLastRunId = v
}

// GetScheduleCronString returns the ScheduleCronString field value
func (o *CrawlerSchedule) GetScheduleCronString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleCronString
}

// GetScheduleCronStringOk returns a tuple with the ScheduleCronString field value
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetScheduleCronStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleCronString, true
}

// SetScheduleCronString sets field value
func (o *CrawlerSchedule) SetScheduleCronString(v string) {
	o.ScheduleCronString = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CrawlerSchedule) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CrawlerSchedule) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CrawlerSchedule) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CrawlerSchedule) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CrawlerSchedule) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *CrawlerSchedule) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *CrawlerSchedule) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrawlerSchedule) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *CrawlerSchedule) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *CrawlerSchedule) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

func (o CrawlerSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrawlerSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["crawler_config_id"] = o.CrawlerConfigId
	toSerialize["project_id"] = o.ProjectId
	toSerialize["crawler_last_run_id"] = o.CrawlerLastRunId
	toSerialize["schedule_cron_string"] = o.ScheduleCronString
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CrawlerSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"crawler_config_id",
		"project_id",
		"crawler_last_run_id",
		"schedule_cron_string",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrawlerSchedule := _CrawlerSchedule{}

	err = json.Unmarshal(data, &varCrawlerSchedule)

	if err != nil {
		return err
	}

	*o = CrawlerSchedule(varCrawlerSchedule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "crawler_config_id")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "crawler_last_run_id")
		delete(additionalProperties, "schedule_cron_string")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "deleted_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCrawlerSchedule struct {
	value *CrawlerSchedule
	isSet bool
}

func (v NullableCrawlerSchedule) Get() *CrawlerSchedule {
	return v.value
}

func (v *NullableCrawlerSchedule) Set(val *CrawlerSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableCrawlerSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableCrawlerSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrawlerSchedule(val *CrawlerSchedule) *NullableCrawlerSchedule {
	return &NullableCrawlerSchedule{value: val, isSet: true}
}

func (v NullableCrawlerSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrawlerSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


