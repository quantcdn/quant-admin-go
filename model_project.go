/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	Id *int32 `json:"id,omitempty"`
	MachineName string `json:"machine_name"`
	Name string `json:"name"`
	OrganizationId *int32 `json:"organization_id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	ProjectType *string `json:"project_type,omitempty"`
	GitUrl *string `json:"git_url,omitempty"`
	SecurityScore *string `json:"security_score,omitempty"`
	ParentProjectId *int32 `json:"parent_project_id,omitempty"`
	Region *string `json:"region,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	FastlyMigrated *int32 `json:"fastly_migrated,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Project Project

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(machineName string, name string) *Project {
	this := Project{}
	this.MachineName = machineName
	this.Name = name
	var projectType string = "normal"
	this.ProjectType = &projectType
	var fastlyMigrated int32 = 1
	this.FastlyMigrated = &fastlyMigrated
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	var projectType string = "normal"
	this.ProjectType = &projectType
	var fastlyMigrated int32 = 1
	this.FastlyMigrated = &fastlyMigrated
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Project) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Project) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Project) SetId(v int32) {
	o.Id = &v
}

// GetMachineName returns the MachineName field value
func (o *Project) GetMachineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value
// and a boolean to check if the value has been set.
func (o *Project) GetMachineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineName, true
}

// SetMachineName sets field value
func (o *Project) SetMachineName(v string) {
	o.MachineName = v
}

// GetName returns the Name field value
func (o *Project) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Project) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *Project) GetOrganizationId() int32 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret int32
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetOrganizationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *Project) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given int32 and assigns it to the OrganizationId field.
func (o *Project) SetOrganizationId(v int32) {
	o.OrganizationId = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Project) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Project) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Project) SetUuid(v string) {
	o.Uuid = &v
}

// GetProjectType returns the ProjectType field value if set, zero value otherwise.
func (o *Project) GetProjectType() string {
	if o == nil || IsNil(o.ProjectType) {
		var ret string
		return ret
	}
	return *o.ProjectType
}

// GetProjectTypeOk returns a tuple with the ProjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectType) {
		return nil, false
	}
	return o.ProjectType, true
}

// HasProjectType returns a boolean if a field has been set.
func (o *Project) HasProjectType() bool {
	if o != nil && !IsNil(o.ProjectType) {
		return true
	}

	return false
}

// SetProjectType gets a reference to the given string and assigns it to the ProjectType field.
func (o *Project) SetProjectType(v string) {
	o.ProjectType = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *Project) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *Project) HasGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *Project) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetSecurityScore returns the SecurityScore field value if set, zero value otherwise.
func (o *Project) GetSecurityScore() string {
	if o == nil || IsNil(o.SecurityScore) {
		var ret string
		return ret
	}
	return *o.SecurityScore
}

// GetSecurityScoreOk returns a tuple with the SecurityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetSecurityScoreOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityScore) {
		return nil, false
	}
	return o.SecurityScore, true
}

// HasSecurityScore returns a boolean if a field has been set.
func (o *Project) HasSecurityScore() bool {
	if o != nil && !IsNil(o.SecurityScore) {
		return true
	}

	return false
}

// SetSecurityScore gets a reference to the given string and assigns it to the SecurityScore field.
func (o *Project) SetSecurityScore(v string) {
	o.SecurityScore = &v
}

// GetParentProjectId returns the ParentProjectId field value if set, zero value otherwise.
func (o *Project) GetParentProjectId() int32 {
	if o == nil || IsNil(o.ParentProjectId) {
		var ret int32
		return ret
	}
	return *o.ParentProjectId
}

// GetParentProjectIdOk returns a tuple with the ParentProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetParentProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentProjectId) {
		return nil, false
	}
	return o.ParentProjectId, true
}

// HasParentProjectId returns a boolean if a field has been set.
func (o *Project) HasParentProjectId() bool {
	if o != nil && !IsNil(o.ParentProjectId) {
		return true
	}

	return false
}

// SetParentProjectId gets a reference to the given int32 and assigns it to the ParentProjectId field.
func (o *Project) SetParentProjectId(v int32) {
	o.ParentProjectId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Project) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Project) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Project) SetRegion(v string) {
	o.Region = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Project) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Project) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Project) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Project) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Project) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Project) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Project) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Project) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *Project) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetFastlyMigrated returns the FastlyMigrated field value if set, zero value otherwise.
func (o *Project) GetFastlyMigrated() int32 {
	if o == nil || IsNil(o.FastlyMigrated) {
		var ret int32
		return ret
	}
	return *o.FastlyMigrated
}

// GetFastlyMigratedOk returns a tuple with the FastlyMigrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetFastlyMigratedOk() (*int32, bool) {
	if o == nil || IsNil(o.FastlyMigrated) {
		return nil, false
	}
	return o.FastlyMigrated, true
}

// HasFastlyMigrated returns a boolean if a field has been set.
func (o *Project) HasFastlyMigrated() bool {
	if o != nil && !IsNil(o.FastlyMigrated) {
		return true
	}

	return false
}

// SetFastlyMigrated gets a reference to the given int32 and assigns it to the FastlyMigrated field.
func (o *Project) SetFastlyMigrated(v int32) {
	o.FastlyMigrated = &v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["machine_name"] = o.MachineName
	toSerialize["name"] = o.Name
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.ProjectType) {
		toSerialize["project_type"] = o.ProjectType
	}
	if !IsNil(o.GitUrl) {
		toSerialize["git_url"] = o.GitUrl
	}
	if !IsNil(o.SecurityScore) {
		toSerialize["security_score"] = o.SecurityScore
	}
	if !IsNil(o.ParentProjectId) {
		toSerialize["parent_project_id"] = o.ParentProjectId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.FastlyMigrated) {
		toSerialize["fastly_migrated"] = o.FastlyMigrated
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Project) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"machine_name",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProject := _Project{}

	err = json.Unmarshal(data, &varProject)

	if err != nil {
		return err
	}

	*o = Project(varProject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "machine_name")
		delete(additionalProperties, "name")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "project_type")
		delete(additionalProperties, "git_url")
		delete(additionalProperties, "security_score")
		delete(additionalProperties, "parent_project_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "fastly_migrated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


