/*
Quant administration API

The Quant administration API provides programmatic access to manage projects within your available organizations. 

API version: 2.0.0
Contact: apiteam@quantcdn.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	Id *int32 `json:"id,omitempty"`
	MachineName *string `json:"machine_name,omitempty"`
	Name *string `json:"name,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	OrganisationId *int32 `json:"organisation_id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Region *string `json:"region,omitempty"`
	ProjectType *string `json:"project_type,omitempty"`
	ProjectParentId *int32 `json:"project_parent_id,omitempty"`
	SecurityScore *int32 `json:"security_score,omitempty"`
	GitUrl *string `json:"git_url,omitempty"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject() *Project {
	this := Project{}
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Project) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Project) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Project) SetId(v int32) {
	o.Id = &v
}

// GetMachineName returns the MachineName field value if set, zero value otherwise.
func (o *Project) GetMachineName() string {
	if o == nil || IsNil(o.MachineName) {
		var ret string
		return ret
	}
	return *o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetMachineNameOk() (*string, bool) {
	if o == nil || IsNil(o.MachineName) {
		return nil, false
	}
	return o.MachineName, true
}

// HasMachineName returns a boolean if a field has been set.
func (o *Project) HasMachineName() bool {
	if o != nil && !IsNil(o.MachineName) {
		return true
	}

	return false
}

// SetMachineName gets a reference to the given string and assigns it to the MachineName field.
func (o *Project) SetMachineName(v string) {
	o.MachineName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Project) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Project) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Project) SetName(v string) {
	o.Name = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Project) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Project) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Project) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Project) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Project) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Project) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Project) GetDeletedAt() string {
	if o == nil || IsNil(o.DeletedAt) {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDeletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Project) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *Project) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetOrganisationId returns the OrganisationId field value if set, zero value otherwise.
func (o *Project) GetOrganisationId() int32 {
	if o == nil || IsNil(o.OrganisationId) {
		var ret int32
		return ret
	}
	return *o.OrganisationId
}

// GetOrganisationIdOk returns a tuple with the OrganisationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetOrganisationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrganisationId) {
		return nil, false
	}
	return o.OrganisationId, true
}

// HasOrganisationId returns a boolean if a field has been set.
func (o *Project) HasOrganisationId() bool {
	if o != nil && !IsNil(o.OrganisationId) {
		return true
	}

	return false
}

// SetOrganisationId gets a reference to the given int32 and assigns it to the OrganisationId field.
func (o *Project) SetOrganisationId(v int32) {
	o.OrganisationId = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Project) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Project) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Project) SetUuid(v string) {
	o.Uuid = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Project) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Project) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Project) SetRegion(v string) {
	o.Region = &v
}

// GetProjectType returns the ProjectType field value if set, zero value otherwise.
func (o *Project) GetProjectType() string {
	if o == nil || IsNil(o.ProjectType) {
		var ret string
		return ret
	}
	return *o.ProjectType
}

// GetProjectTypeOk returns a tuple with the ProjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectType) {
		return nil, false
	}
	return o.ProjectType, true
}

// HasProjectType returns a boolean if a field has been set.
func (o *Project) HasProjectType() bool {
	if o != nil && !IsNil(o.ProjectType) {
		return true
	}

	return false
}

// SetProjectType gets a reference to the given string and assigns it to the ProjectType field.
func (o *Project) SetProjectType(v string) {
	o.ProjectType = &v
}

// GetProjectParentId returns the ProjectParentId field value if set, zero value otherwise.
func (o *Project) GetProjectParentId() int32 {
	if o == nil || IsNil(o.ProjectParentId) {
		var ret int32
		return ret
	}
	return *o.ProjectParentId
}

// GetProjectParentIdOk returns a tuple with the ProjectParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectParentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectParentId) {
		return nil, false
	}
	return o.ProjectParentId, true
}

// HasProjectParentId returns a boolean if a field has been set.
func (o *Project) HasProjectParentId() bool {
	if o != nil && !IsNil(o.ProjectParentId) {
		return true
	}

	return false
}

// SetProjectParentId gets a reference to the given int32 and assigns it to the ProjectParentId field.
func (o *Project) SetProjectParentId(v int32) {
	o.ProjectParentId = &v
}

// GetSecurityScore returns the SecurityScore field value if set, zero value otherwise.
func (o *Project) GetSecurityScore() int32 {
	if o == nil || IsNil(o.SecurityScore) {
		var ret int32
		return ret
	}
	return *o.SecurityScore
}

// GetSecurityScoreOk returns a tuple with the SecurityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetSecurityScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.SecurityScore) {
		return nil, false
	}
	return o.SecurityScore, true
}

// HasSecurityScore returns a boolean if a field has been set.
func (o *Project) HasSecurityScore() bool {
	if o != nil && !IsNil(o.SecurityScore) {
		return true
	}

	return false
}

// SetSecurityScore gets a reference to the given int32 and assigns it to the SecurityScore field.
func (o *Project) SetSecurityScore(v int32) {
	o.SecurityScore = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *Project) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *Project) HasGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *Project) SetGitUrl(v string) {
	o.GitUrl = &v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MachineName) {
		toSerialize["machine_name"] = o.MachineName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.OrganisationId) {
		toSerialize["organisation_id"] = o.OrganisationId
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.ProjectType) {
		toSerialize["project_type"] = o.ProjectType
	}
	if !IsNil(o.ProjectParentId) {
		toSerialize["project_parent_id"] = o.ProjectParentId
	}
	if !IsNil(o.SecurityScore) {
		toSerialize["security_score"] = o.SecurityScore
	}
	if !IsNil(o.GitUrl) {
		toSerialize["git_url"] = o.GitUrl
	}
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


