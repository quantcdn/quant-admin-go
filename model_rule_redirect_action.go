/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RuleRedirectAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleRedirectAction{}

// RuleRedirectAction struct for RuleRedirectAction
type RuleRedirectAction struct {
	RedirectTo string `json:"redirect_to"`
	RedirectCode string `json:"redirect_code"`
}

type _RuleRedirectAction RuleRedirectAction

// NewRuleRedirectAction instantiates a new RuleRedirectAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleRedirectAction(redirectTo string, redirectCode string) *RuleRedirectAction {
	this := RuleRedirectAction{}
	this.RedirectTo = redirectTo
	this.RedirectCode = redirectCode
	return &this
}

// NewRuleRedirectActionWithDefaults instantiates a new RuleRedirectAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleRedirectActionWithDefaults() *RuleRedirectAction {
	this := RuleRedirectAction{}
	var redirectCode string = "301"
	this.RedirectCode = redirectCode
	return &this
}

// GetRedirectTo returns the RedirectTo field value
func (o *RuleRedirectAction) GetRedirectTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedirectTo
}

// GetRedirectToOk returns a tuple with the RedirectTo field value
// and a boolean to check if the value has been set.
func (o *RuleRedirectAction) GetRedirectToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedirectTo, true
}

// SetRedirectTo sets field value
func (o *RuleRedirectAction) SetRedirectTo(v string) {
	o.RedirectTo = v
}

// GetRedirectCode returns the RedirectCode field value
func (o *RuleRedirectAction) GetRedirectCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedirectCode
}

// GetRedirectCodeOk returns a tuple with the RedirectCode field value
// and a boolean to check if the value has been set.
func (o *RuleRedirectAction) GetRedirectCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedirectCode, true
}

// SetRedirectCode sets field value
func (o *RuleRedirectAction) SetRedirectCode(v string) {
	o.RedirectCode = v
}

func (o RuleRedirectAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleRedirectAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["redirect_to"] = o.RedirectTo
	toSerialize["redirect_code"] = o.RedirectCode
	return toSerialize, nil
}

func (o *RuleRedirectAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"redirect_to",
		"redirect_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleRedirectAction := _RuleRedirectAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRuleRedirectAction)

	if err != nil {
		return err
	}

	*o = RuleRedirectAction(varRuleRedirectAction)

	return err
}

type NullableRuleRedirectAction struct {
	value *RuleRedirectAction
	isSet bool
}

func (v NullableRuleRedirectAction) Get() *RuleRedirectAction {
	return v.value
}

func (v *NullableRuleRedirectAction) Set(val *RuleRedirectAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleRedirectAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleRedirectAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleRedirectAction(val *RuleRedirectAction) *NullableRuleRedirectAction {
	return &NullableRuleRedirectAction{value: val, isSet: true}
}

func (v NullableRuleRedirectAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleRedirectAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


