/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WAFConfigHttpbl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WAFConfigHttpbl{}

// WAFConfigHttpbl struct for WAFConfigHttpbl
type WAFConfigHttpbl struct {
	HttpblEnabled bool `json:"httpbl_enabled"`
	ApiKey *string `json:"api_key,omitempty"`
	BlockSuspicious bool `json:"block_suspicious"`
	BlockHarvester bool `json:"block_harvester"`
	BlockSpam bool `json:"block_spam"`
	BlockSearchEngine bool `json:"block_search_engine"`
	AdditionalProperties map[string]interface{}
}

type _WAFConfigHttpbl WAFConfigHttpbl

// NewWAFConfigHttpbl instantiates a new WAFConfigHttpbl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWAFConfigHttpbl(httpblEnabled bool, blockSuspicious bool, blockHarvester bool, blockSpam bool, blockSearchEngine bool) *WAFConfigHttpbl {
	this := WAFConfigHttpbl{}
	this.HttpblEnabled = httpblEnabled
	this.BlockSuspicious = blockSuspicious
	this.BlockHarvester = blockHarvester
	this.BlockSpam = blockSpam
	this.BlockSearchEngine = blockSearchEngine
	return &this
}

// NewWAFConfigHttpblWithDefaults instantiates a new WAFConfigHttpbl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWAFConfigHttpblWithDefaults() *WAFConfigHttpbl {
	this := WAFConfigHttpbl{}
	var httpblEnabled bool = false
	this.HttpblEnabled = httpblEnabled
	var blockSuspicious bool = false
	this.BlockSuspicious = blockSuspicious
	var blockHarvester bool = false
	this.BlockHarvester = blockHarvester
	var blockSpam bool = false
	this.BlockSpam = blockSpam
	var blockSearchEngine bool = false
	this.BlockSearchEngine = blockSearchEngine
	return &this
}

// GetHttpblEnabled returns the HttpblEnabled field value
func (o *WAFConfigHttpbl) GetHttpblEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HttpblEnabled
}

// GetHttpblEnabledOk returns a tuple with the HttpblEnabled field value
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetHttpblEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpblEnabled, true
}

// SetHttpblEnabled sets field value
func (o *WAFConfigHttpbl) SetHttpblEnabled(v bool) {
	o.HttpblEnabled = v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *WAFConfigHttpbl) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *WAFConfigHttpbl) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *WAFConfigHttpbl) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetBlockSuspicious returns the BlockSuspicious field value
func (o *WAFConfigHttpbl) GetBlockSuspicious() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BlockSuspicious
}

// GetBlockSuspiciousOk returns a tuple with the BlockSuspicious field value
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetBlockSuspiciousOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSuspicious, true
}

// SetBlockSuspicious sets field value
func (o *WAFConfigHttpbl) SetBlockSuspicious(v bool) {
	o.BlockSuspicious = v
}

// GetBlockHarvester returns the BlockHarvester field value
func (o *WAFConfigHttpbl) GetBlockHarvester() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BlockHarvester
}

// GetBlockHarvesterOk returns a tuple with the BlockHarvester field value
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetBlockHarvesterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHarvester, true
}

// SetBlockHarvester sets field value
func (o *WAFConfigHttpbl) SetBlockHarvester(v bool) {
	o.BlockHarvester = v
}

// GetBlockSpam returns the BlockSpam field value
func (o *WAFConfigHttpbl) GetBlockSpam() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BlockSpam
}

// GetBlockSpamOk returns a tuple with the BlockSpam field value
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetBlockSpamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSpam, true
}

// SetBlockSpam sets field value
func (o *WAFConfigHttpbl) SetBlockSpam(v bool) {
	o.BlockSpam = v
}

// GetBlockSearchEngine returns the BlockSearchEngine field value
func (o *WAFConfigHttpbl) GetBlockSearchEngine() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BlockSearchEngine
}

// GetBlockSearchEngineOk returns a tuple with the BlockSearchEngine field value
// and a boolean to check if the value has been set.
func (o *WAFConfigHttpbl) GetBlockSearchEngineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSearchEngine, true
}

// SetBlockSearchEngine sets field value
func (o *WAFConfigHttpbl) SetBlockSearchEngine(v bool) {
	o.BlockSearchEngine = v
}

func (o WAFConfigHttpbl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WAFConfigHttpbl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["httpbl_enabled"] = o.HttpblEnabled
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	toSerialize["block_suspicious"] = o.BlockSuspicious
	toSerialize["block_harvester"] = o.BlockHarvester
	toSerialize["block_spam"] = o.BlockSpam
	toSerialize["block_search_engine"] = o.BlockSearchEngine

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WAFConfigHttpbl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"httpbl_enabled",
		"block_suspicious",
		"block_harvester",
		"block_spam",
		"block_search_engine",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWAFConfigHttpbl := _WAFConfigHttpbl{}

	err = json.Unmarshal(data, &varWAFConfigHttpbl)

	if err != nil {
		return err
	}

	*o = WAFConfigHttpbl(varWAFConfigHttpbl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "httpbl_enabled")
		delete(additionalProperties, "api_key")
		delete(additionalProperties, "block_suspicious")
		delete(additionalProperties, "block_harvester")
		delete(additionalProperties, "block_spam")
		delete(additionalProperties, "block_search_engine")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWAFConfigHttpbl struct {
	value *WAFConfigHttpbl
	isSet bool
}

func (v NullableWAFConfigHttpbl) Get() *WAFConfigHttpbl {
	return v.value
}

func (v *NullableWAFConfigHttpbl) Set(val *WAFConfigHttpbl) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFConfigHttpbl) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFConfigHttpbl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFConfigHttpbl(val *WAFConfigHttpbl) *NullableWAFConfigHttpbl {
	return &NullableWAFConfigHttpbl{value: val, isSet: true}
}

func (v NullableWAFConfigHttpbl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFConfigHttpbl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


