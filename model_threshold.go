/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Threshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Threshold{}

// Threshold struct for Threshold
type Threshold struct {
	Value *string `json:"value,omitempty"`
	Cooldown *int32 `json:"cooldown,omitempty"`
	Mode *string `json:"mode,omitempty"`
	Rps *int32 `json:"rps,omitempty"`
	NotifySlack *string `json:"notify_slack,omitempty"`
	Type *string `json:"type,omitempty"`
	Hits *int32 `json:"hits,omitempty"`
	Minutes *int32 `json:"minutes,omitempty"`
}

// NewThreshold instantiates a new Threshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreshold() *Threshold {
	this := Threshold{}
	var mode string = "disabled"
	this.Mode = &mode
	return &this
}

// NewThresholdWithDefaults instantiates a new Threshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdWithDefaults() *Threshold {
	this := Threshold{}
	var mode string = "disabled"
	this.Mode = &mode
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Threshold) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Threshold) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Threshold) SetValue(v string) {
	o.Value = &v
}

// GetCooldown returns the Cooldown field value if set, zero value otherwise.
func (o *Threshold) GetCooldown() int32 {
	if o == nil || IsNil(o.Cooldown) {
		var ret int32
		return ret
	}
	return *o.Cooldown
}

// GetCooldownOk returns a tuple with the Cooldown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetCooldownOk() (*int32, bool) {
	if o == nil || IsNil(o.Cooldown) {
		return nil, false
	}
	return o.Cooldown, true
}

// HasCooldown returns a boolean if a field has been set.
func (o *Threshold) HasCooldown() bool {
	if o != nil && !IsNil(o.Cooldown) {
		return true
	}

	return false
}

// SetCooldown gets a reference to the given int32 and assigns it to the Cooldown field.
func (o *Threshold) SetCooldown(v int32) {
	o.Cooldown = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Threshold) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Threshold) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *Threshold) SetMode(v string) {
	o.Mode = &v
}

// GetRps returns the Rps field value if set, zero value otherwise.
func (o *Threshold) GetRps() int32 {
	if o == nil || IsNil(o.Rps) {
		var ret int32
		return ret
	}
	return *o.Rps
}

// GetRpsOk returns a tuple with the Rps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetRpsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rps) {
		return nil, false
	}
	return o.Rps, true
}

// HasRps returns a boolean if a field has been set.
func (o *Threshold) HasRps() bool {
	if o != nil && !IsNil(o.Rps) {
		return true
	}

	return false
}

// SetRps gets a reference to the given int32 and assigns it to the Rps field.
func (o *Threshold) SetRps(v int32) {
	o.Rps = &v
}

// GetNotifySlack returns the NotifySlack field value if set, zero value otherwise.
func (o *Threshold) GetNotifySlack() string {
	if o == nil || IsNil(o.NotifySlack) {
		var ret string
		return ret
	}
	return *o.NotifySlack
}

// GetNotifySlackOk returns a tuple with the NotifySlack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetNotifySlackOk() (*string, bool) {
	if o == nil || IsNil(o.NotifySlack) {
		return nil, false
	}
	return o.NotifySlack, true
}

// HasNotifySlack returns a boolean if a field has been set.
func (o *Threshold) HasNotifySlack() bool {
	if o != nil && !IsNil(o.NotifySlack) {
		return true
	}

	return false
}

// SetNotifySlack gets a reference to the given string and assigns it to the NotifySlack field.
func (o *Threshold) SetNotifySlack(v string) {
	o.NotifySlack = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Threshold) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Threshold) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Threshold) SetType(v string) {
	o.Type = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *Threshold) GetHits() int32 {
	if o == nil || IsNil(o.Hits) {
		var ret int32
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetHitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *Threshold) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given int32 and assigns it to the Hits field.
func (o *Threshold) SetHits(v int32) {
	o.Hits = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *Threshold) GetMinutes() int32 {
	if o == nil || IsNil(o.Minutes) {
		var ret int32
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *Threshold) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int32 and assigns it to the Minutes field.
func (o *Threshold) SetMinutes(v int32) {
	o.Minutes = &v
}

func (o Threshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Threshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Cooldown) {
		toSerialize["cooldown"] = o.Cooldown
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Rps) {
		toSerialize["rps"] = o.Rps
	}
	if !IsNil(o.NotifySlack) {
		toSerialize["notify_slack"] = o.NotifySlack
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	return toSerialize, nil
}

type NullableThreshold struct {
	value *Threshold
	isSet bool
}

func (v NullableThreshold) Get() *Threshold {
	return v.value
}

func (v *NullableThreshold) Set(val *Threshold) {
	v.value = val
	v.isSet = true
}

func (v NullableThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreshold(val *Threshold) *NullableThreshold {
	return &NullableThreshold{value: val, isSet: true}
}

func (v NullableThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


