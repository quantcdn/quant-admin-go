openapi: 3.1.0
info:
  contact:
    email: apiteam@quantcdn.io
  description: |
    The Quant administration API provides programmatic access to manage
    projects within your available organizations.
  title: Quant administration API
  version: 2.0.0
servers:
- url: http://localhost:8001/api/v2
security:
- BearerAuth: []
tags:
- description: Operations related to organizations.
  name: organizations
- description: Operations related to projects.
  name: projects
- description: Operations related to crawlers.
  name: crawlers
- description: Operations related to domains.
  name: domains
- description: Operations related to rules.
  name: rules
paths:
  /organizations:
    get:
      description: List organizations
      operationId: listOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: List all organizations accessible by the token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - organizations
  /organizations/{organization}:
    get:
      description: Get organization by machine name
      operationId: getOrganization
      parameters:
      - $ref: '#/components/parameters/organization'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Show an organizations details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - organizations
  /organizations/{organization}/projects:
    get:
      description: Get projects for an organization
      operationId: listProjects
      parameters:
      - $ref: '#/components/parameters/organization'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: The project data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - projects
    post:
      description: Create a new project for an organization
      operationId: createProject
      parameters:
      - $ref: '#/components/parameters/organization'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - projects
  /organizations/{organization}/projects/{project}:
    delete:
      description: Delete a project
      operationId: deleteProject
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - projects
    get:
      description: Get project details
      operationId: getProject
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Show the project details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - projects
    patch:
      description: Update project details
      operationId: updateProject
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: The project data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - projects
  /organizations/{organization}/projects/{project}/crawlers:
    get:
      description: Get crawlers for a project
      operationId: listCrawlers
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Crawler'
                type: array
          description: Get crawlers for a project
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - crawlers
    post:
      description: Create a new crawler for a project
      operationId: createCrawlers
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrawlerRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crawler'
          description: The created crawler
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - crawlers
  /organizations/{organization}/projects/{project}/crawlers/{crawler}:
    delete:
      description: Delete a crawler
      operationId: deleteCrawler
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/crawler'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crawler'
          description: The deleted crawler
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - crawlers
    get:
      description: Get crawler details
      operationId: getCrawler
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/crawler'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crawler'
          description: Get crawler details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - crawlers
    patch:
      description: Update crawler details
      operationId: updateCrawler
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/crawler'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrawlerRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crawler'
          description: The updated crawler
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - crawlers
  /organizations/{organization}/projects/{project}/domains:
    get:
      description: List domains for a project
      operationId: listDomains
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Domain'
                type: array
          description: List all projects for this organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - domains
    post:
      description: Create a new domain for a project
      operationId: createDomain
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: The created domain
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - domains
  /organizations/{organization}/projects/{project}/domains/{domain}:
    delete:
      description: Delete a domain
      operationId: deleteDomain
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/domain'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: The deleted domain
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - domains
    get:
      description: Get domain details
      operationId: getDomain
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/domain'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: Show the domain details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - domains
    patch:
      description: Update domain details
      operationId: updateDomain
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/domain'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: The edited domain
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - domains
  /organizations/{organization}/projects/{project}/rules:
    get:
      description: Get rules for a project
      operationId: listRules
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Rule'
                type: array
          description: List all projects for this organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/redirect:
    post:
      description: Create a new redirect rule
      operationId: createRuleRedirect
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleRedirectRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/redirect/{rule}:
    delete:
      description: Delete a redirect rule
      operationId: deleteRuleRedirect
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    get:
      description: Get redirect rule details
      operationId: getRuleRedirect
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    patch:
      description: Update redirect rule details
      operationId: updateRuleRedirect
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleRedirectRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/proxy:
    post:
      description: Update proxy rule details
      operationId: createRuleProxy
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleProxyRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/proxy/{rule}:
    delete:
      description: Delete a proxy rule
      operationId: deleteRuleProxy
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    get:
      description: Get proxy rule details
      operationId: getRuleProxy
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    patch:
      description: Update proxy rule details
      operationId: updateRuleProxy
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleProxyRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/auth:
    post:
      description: Create authentication rules
      operationId: createRuleAuth
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleAuthRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/auth/{rule}:
    delete:
      description: Delete an authentication rule
      operationId: deleteRuleAuth
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    get:
      description: Get authentication rule details
      operationId: getRuleAuth
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    patch:
      description: Update authentication rule details
      operationId: updateRuleAuth
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleAuthRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/custom-response:
    post:
      description: Create custom response rule details
      operationId: createRuleCustomResponse
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleCustomResponseRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/custom-response/{rule}:
    delete:
      description: Delete a custom response rule
      operationId: deleteRuleCustomResponse
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    get:
      description: Get custom repsonse rule details
      operationId: getRuleCustomResponse
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    patch:
      description: Update custom response rule details
      operationId: updateRuleCustomResponse
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleCustomResponseRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/headers:
    post:
      description: Create header rules
      operationId: createRuleHeaders
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleHeaderRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
  /organizations/{organization}/projects/{project}/rules/headers/{rule}:
    delete:
      description: Delete a header rule
      operationId: deleteRuleHeaders
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    get:
      description: Get header rule details
      operationId: getRuleHeaders
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
    patch:
      description: Update header rule details
      operationId: updateRuleHeaders
      parameters:
      - $ref: '#/components/parameters/organization'
      - $ref: '#/components/parameters/project'
      - $ref: '#/components/parameters/rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleHeaderRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The rule details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid token provided
      tags:
      - rules
components:
  parameters:
    organization:
      description: Organization machine name
      explode: false
      in: path
      name: organization
      required: true
      schema:
        type: string
      style: simple
    project:
      description: Project machine name
      explode: false
      in: path
      name: project
      required: true
      schema:
        type: string
      style: simple
    crawler:
      description: Crawler uuid
      explode: false
      in: path
      name: crawler
      required: true
      schema:
        type: string
      style: simple
    domain:
      explode: false
      in: path
      name: domain
      required: true
      schema:
        type: string
      style: simple
    rule:
      explode: false
      in: path
      name: rule
      required: true
      schema:
        type: string
      style: simple
  schemas:
    Error:
      example:
        data: "{}"
        error: true
        message: message
      properties:
        error:
          type: boolean
        message:
          type: string
        data:
          type: object
    Organization:
      example:
        organisation_machine_name: organisation_machine_name
        updated_at: updated_at
        name: name
        created_at: created_at
        subscrption: 0
        type: type
        region: region
      properties:
        name:
          type: string
        organisation_machine_name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        subscrption:
          type: integer
        type:
          type: string
        region:
          type: string
    Project:
      example:
        project_type: project_type
        project_parent_id: 1
        created_at: created_at
        machine_name: machine_name
        deleted_at: deleted_at
        uuid: uuid
        organisation_id: 6
        updated_at: updated_at
        name: name
        security_score: 5
        id: 0
        region: region
        git_url: git_url
      properties:
        id:
          format: integer
          type: integer
        machine_name:
          type: string
        name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
        organisation_id:
          format: integer
          type: integer
        uuid:
          type: string
        region:
          type: string
        project_type:
          type: string
        project_parent_id:
          type: integer
        security_score:
          type: integer
        git_url:
          type: string
    Crawler:
      example:
        urls_list:
        - urls_list
        - urls_list
        updated_at: updated_at
        project_id: 6
        domain: domain
        created_at: created_at
        domain_verified: 1
        id: 0
        uuid: uuid
        config: config
        deleted_at: deleted_at
      properties:
        id:
          type: integer
        project_id:
          type: integer
        uuid:
          type: string
        config:
          type: string
        urls_list:
          items:
            type: string
          type: array
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
        domain:
          type: string
        domain_verified:
          type: integer
    Domain:
      example:
        updated_at: updated_at
        project_id: 6
        domain: domain
        dns_engaged: 5
        created_at: created_at
        id: 0
        deleted_at: deleted_at
        in_section: 1
        section_message: section_message
      properties:
        id:
          type: integer
        domain:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
        project_id:
          type: integer
        in_section:
          type: integer
        section_message:
          type: string
        dns_engaged:
          type: integer
    Rule:
      example:
        uuid: uuid
        config: "{}"
      properties:
        uuid:
          type: string
        config:
          type: object
    ProjectRequest:
      example:
        basic_auth_preview_only: basic_auth_preview_only
        allow_query_params: true
        basic_auth_password: basic_auth_password
        custom_s3_sync_region: custom_s3_sync_region
        custom_s3_sync_access_key: custom_s3_sync_access_key
        name: name
        basic_auth_username: basic_auth_username
        region: region
        custom_s3_sync_secret_key: custom_s3_sync_secret_key
        custom_s3_sync_bucket: custom_s3_sync_bucket
      properties:
        name:
          type: string
        region:
          type: string
        allow_query_params:
          type: boolean
        basic_auth_username:
          type: string
        basic_auth_password:
          type: string
        basic_auth_preview_only:
          type: string
        custom_s3_sync_bucket:
          type: string
        custom_s3_sync_region:
          type: string
        custom_s3_sync_access_key:
          type: string
        custom_s3_sync_secret_key:
          type: string
    CrawlerRequest:
      example:
        headers: "{}"
        url_list:
        - url_list
        - url_list
        domain: domain
        name: name
        browser_mode: true
      properties:
        name:
          type: string
        domain:
          type: string
        browser_mode:
          type: boolean
        url_list:
          items:
            type: string
          type: array
        headers:
          type: object
    DomainRequest:
      example:
        headers: "{}"
        url_list:
        - url_list
        - url_list
        domain: domain
        name: name
        browser_mode: true
      properties:
        name:
          type: string
        domain:
          type: string
        browser_mode:
          type: boolean
        url_list:
          items:
            type: string
          type: array
        headers:
          type: object
    RuleRedirectRequest:
      example:
        country: country_is
        method: method_is
        ip_is_not:
        - ip_is_not
        - ip_is_not
        method_is:
        - method_is
        - method_is
        ip: ip_is
        only_with_cookie: only_with_cookie
        redirect_code: 0
        country_is:
        - country_is
        - country_is
        method_is_not:
        - method_is_not
        - method_is_not
        url: url
        redirect_to: redirect_to
        country_is_not:
        - country_is_not
        - country_is_not
        domain: domain
        name: name
        ip_is:
        - ip_is
        - ip_is
        disabled: true
      properties:
        domain:
          type: string
        country:
          enum:
          - country_is
          - country_is_not
          type: string
        country_is:
          items:
            type: string
          type: array
        country_is_not:
          items:
            type: string
          type: array
        method:
          enum:
          - method_is
          - method_is_not
          type: string
        method_is:
          items:
            type: string
          type: array
        method_is_not:
          items:
            type: string
          type: array
        ip:
          enum:
          - ip_is
          - ip_is_not
          type: string
        ip_is:
          items:
            type: string
          type: array
        ip_is_not:
          items:
            type: string
          type: array
        only_with_cookie:
          type: string
        url:
          type: string
        name:
          type: string
        disabled:
          type: boolean
        redirect_to:
          type: string
        redirect_code:
          type: integer
    RuleProxyRequest:
      example:
        country: country_is
        cache_lifetime: 0
        method: method_is
        ip_is_not:
        - ip_is_not
        - ip_is_not
        strip_headers:
        - strip_headers
        - strip_headers
        method_is:
        - method_is
        - method_is
        ip: ip_is
        only_with_cookie: only_with_cookie
        country_is:
        - country_is
        - country_is
        method_is_not:
        - method_is_not
        - method_is_not
        url: url
        country_is_not:
        - country_is_not
        - country_is_not
        only_proxy_404: true
        auth_user: auth_user
        domain: domain
        name: name
        host: host
        waf_enabled: true
        ip_is:
        - ip_is
        - ip_is
        auth_pass: auth_pass
        disabled: true
        to: to
        disable_ssl_verify: true
        waf_config:
          allow_rules:
          - 1
          - 1
          origin_timeout: 5
          httpbl:
            block_harvester: true
            httpbl_enabled: true
            block_spam: true
            block_search_engine: true
            block_suspicious: true
          failover_origin_ttfb: 2
          notify_slack_hits_rpm: 5
          notify_config:
            period: 2
            slack_webhook: slack_webhook
            origin_status_code:
            - 3
            - 3
          notify: notify
          allow_ip:
          - allow_ip
          - allow_ip
          mode: block
          inject_headers:
          - inject_headers
          - inject_headers
          notify_email: notify_email
          block_ip:
          - block_ip
          - block_ip
          block_referer:
          - block_referer
          - block_referer
          failover_lifetime: 9
          block_ua:
          - block_ua
          - block_ua
          failover_origin_status_code: 7
          notify_slack: notify_slack
          proxy_alert_enabled: true
          paranoia_level: 6
          failover_mode: true
      properties:
        domain:
          type: string
        country:
          enum:
          - country_is
          - country_is_not
          type: string
        country_is:
          items:
            type: string
          type: array
        country_is_not:
          items:
            type: string
          type: array
        method:
          enum:
          - method_is
          - method_is_not
          type: string
        method_is:
          items:
            type: string
          type: array
        method_is_not:
          items:
            type: string
          type: array
        ip:
          enum:
          - ip_is
          - ip_is_not
          type: string
        ip_is:
          items:
            type: string
          type: array
        ip_is_not:
          items:
            type: string
          type: array
        only_with_cookie:
          type: string
        url:
          type: string
        name:
          type: string
        disabled:
          type: boolean
        to:
          type: string
        host:
          type: string
        auth_user:
          type: string
        auth_pass:
          type: string
        disable_ssl_verify:
          type: boolean
        cache_lifetime:
          type: integer
        only_proxy_404:
          type: boolean
        strip_headers:
          items:
            type: string
          type: array
        waf_enabled:
          type: boolean
        waf_config:
          $ref: '#/components/schemas/RuleProxyRequest_waf_config'
    RuleAuthRequest:
      example:
        country: country_is
        cache_lifetime: 0
        method: method_is
        ip_is_not:
        - ip_is_not
        - ip_is_not
        strip_headers:
        - strip_headers
        - strip_headers
        method_is:
        - method_is
        - method_is
        ip: ip_is
        only_with_cookie: only_with_cookie
        country_is:
        - country_is
        - country_is
        method_is_not:
        - method_is_not
        - method_is_not
        url: url
        country_is_not:
        - country_is_not
        - country_is_not
        only_proxy_404: true
        auth_user: auth_user
        domain: domain
        name: name
        host: host
        ip_is:
        - ip_is
        - ip_is
        auth_pass: auth_pass
        disabled: true
        to: to
        disable_ssl_verify: true
      properties:
        domain:
          type: string
        country:
          enum:
          - country_is
          - country_is_not
          type: string
        country_is:
          items:
            type: string
          type: array
        country_is_not:
          items:
            type: string
          type: array
        method:
          enum:
          - method_is
          - method_is_not
          type: string
        method_is:
          items:
            type: string
          type: array
        method_is_not:
          items:
            type: string
          type: array
        ip:
          enum:
          - ip_is
          - ip_is_not
          type: string
        ip_is:
          items:
            type: string
          type: array
        ip_is_not:
          items:
            type: string
          type: array
        only_with_cookie:
          type: string
        url:
          type: string
        name:
          type: string
        disabled:
          type: boolean
        to:
          type: string
        host:
          type: string
        auth_user:
          type: string
        auth_pass:
          type: string
        disable_ssl_verify:
          type: boolean
        cache_lifetime:
          type: integer
        only_proxy_404:
          type: boolean
        strip_headers:
          items:
            type: string
          type: array
    RuleCustomResponseRequest:
      example:
        country: country_is
        cache_lifetime: 0
        method: method_is
        ip_is_not:
        - ip_is_not
        - ip_is_not
        strip_headers:
        - strip_headers
        - strip_headers
        custom_response_status_code: 6
        method_is:
        - method_is
        - method_is
        ip: ip_is
        only_with_cookie: only_with_cookie
        country_is:
        - country_is
        - country_is
        method_is_not:
        - method_is_not
        - method_is_not
        custom_response_body: custom_response_body
        url: url
        country_is_not:
        - country_is_not
        - country_is_not
        only_proxy_404: true
        auth_user: auth_user
        domain: domain
        name: name
        host: host
        ip_is:
        - ip_is
        - ip_is
        auth_pass: auth_pass
        disabled: true
        to: to
        disable_ssl_verify: true
      properties:
        domain:
          type: string
        country:
          enum:
          - country_is
          - country_is_not
          type: string
        country_is:
          items:
            type: string
          type: array
        country_is_not:
          items:
            type: string
          type: array
        method:
          enum:
          - method_is
          - method_is_not
          type: string
        method_is:
          items:
            type: string
          type: array
        method_is_not:
          items:
            type: string
          type: array
        ip:
          enum:
          - ip_is
          - ip_is_not
          type: string
        ip_is:
          items:
            type: string
          type: array
        ip_is_not:
          items:
            type: string
          type: array
        only_with_cookie:
          type: string
        url:
          type: string
        name:
          type: string
        disabled:
          type: boolean
        to:
          type: string
        host:
          type: string
        auth_user:
          type: string
        auth_pass:
          type: string
        disable_ssl_verify:
          type: boolean
        cache_lifetime:
          type: integer
        only_proxy_404:
          type: boolean
        strip_headers:
          items:
            type: string
          type: array
        custom_response_status_code:
          type: integer
        custom_response_body:
          type: string
    RuleHeaderRequest:
      example:
        country: country_is
        headers: "{}"
        cache_lifetime: 0
        method: method_is
        ip_is_not:
        - ip_is_not
        - ip_is_not
        strip_headers:
        - strip_headers
        - strip_headers
        method_is:
        - method_is
        - method_is
        ip: ip_is
        only_with_cookie: only_with_cookie
        country_is:
        - country_is
        - country_is
        method_is_not:
        - method_is_not
        - method_is_not
        url: url
        country_is_not:
        - country_is_not
        - country_is_not
        only_proxy_404: true
        auth_user: auth_user
        domain: domain
        name: name
        host: host
        ip_is:
        - ip_is
        - ip_is
        auth_pass: auth_pass
        disabled: true
        to: to
        disable_ssl_verify: true
      properties:
        domain:
          type: string
        country:
          enum:
          - country_is
          - country_is_not
          type: string
        country_is:
          items:
            type: string
          type: array
        country_is_not:
          items:
            type: string
          type: array
        method:
          enum:
          - method_is
          - method_is_not
          type: string
        method_is:
          items:
            type: string
          type: array
        method_is_not:
          items:
            type: string
          type: array
        ip:
          enum:
          - ip_is
          - ip_is_not
          type: string
        ip_is:
          items:
            type: string
          type: array
        ip_is_not:
          items:
            type: string
          type: array
        only_with_cookie:
          type: string
        url:
          type: string
        name:
          type: string
        disabled:
          type: boolean
        to:
          type: string
        host:
          type: string
        auth_user:
          type: string
        auth_pass:
          type: string
        disable_ssl_verify:
          type: boolean
        cache_lifetime:
          type: integer
        only_proxy_404:
          type: boolean
        strip_headers:
          items:
            type: string
          type: array
        headers:
          type: object
    RuleProxyRequest_waf_config_httpbl:
      example:
        block_harvester: true
        httpbl_enabled: true
        block_spam: true
        block_search_engine: true
        block_suspicious: true
      properties:
        httpbl_enabled:
          type: boolean
        block_suspicious:
          type: boolean
        block_harvester:
          type: boolean
        block_spam:
          type: boolean
        block_search_engine:
          type: boolean
    RuleProxyRequest_waf_config_notify_config:
      example:
        period: 2
        slack_webhook: slack_webhook
        origin_status_code:
        - 3
        - 3
      properties:
        origin_status_code:
          items:
            type: integer
          type: array
        period:
          type: integer
        slack_webhook:
          type: string
    RuleProxyRequest_waf_config:
      example:
        allow_rules:
        - 1
        - 1
        origin_timeout: 5
        httpbl:
          block_harvester: true
          httpbl_enabled: true
          block_spam: true
          block_search_engine: true
          block_suspicious: true
        failover_origin_ttfb: 2
        notify_slack_hits_rpm: 5
        notify_config:
          period: 2
          slack_webhook: slack_webhook
          origin_status_code:
          - 3
          - 3
        notify: notify
        allow_ip:
        - allow_ip
        - allow_ip
        mode: block
        inject_headers:
        - inject_headers
        - inject_headers
        notify_email: notify_email
        block_ip:
        - block_ip
        - block_ip
        block_referer:
        - block_referer
        - block_referer
        failover_lifetime: 9
        block_ua:
        - block_ua
        - block_ua
        failover_origin_status_code: 7
        notify_slack: notify_slack
        proxy_alert_enabled: true
        paranoia_level: 6
        failover_mode: true
      properties:
        mode:
          enum:
          - block
          - report
          type: string
        paranoia_level:
          type: integer
        allow_rules:
          items:
            type: integer
          type: array
        allow_ip:
          items:
            type: string
          type: array
        block_ip:
          items:
            type: string
          type: array
        block_ua:
          items:
            type: string
          type: array
        block_referer:
          items:
            type: string
          type: array
        notify_slack:
          type: string
        notify_slack_hits_rpm:
          type: integer
        notify_email:
          type: string
        httpbl:
          $ref: '#/components/schemas/RuleProxyRequest_waf_config_httpbl'
        proxy_alert_enabled:
          type: boolean
        origin_timeout:
          type: integer
        failover_mode:
          type: boolean
        failover_origin_ttfb:
          type: integer
        failover_origin_status_code:
          type: integer
        failover_lifetime:
          type: integer
        notify:
          type: string
        notify_config:
          $ref: '#/components/schemas/RuleProxyRequest_waf_config_notify_config'
        inject_headers:
          items:
            type: string
          type: array
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
