/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectsData{}

// ProjectsData struct for ProjectsData
type ProjectsData struct {
	Projects []ProjectsDataProjects `json:"projects,omitempty"`
}

// NewProjectsData instantiates a new ProjectsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsData() *ProjectsData {
	this := ProjectsData{}
	return &this
}

// NewProjectsDataWithDefaults instantiates a new ProjectsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsDataWithDefaults() *ProjectsData {
	this := ProjectsData{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectsData) GetProjects() []ProjectsDataProjects {
	if o == nil || IsNil(o.Projects) {
		var ret []ProjectsDataProjects
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsData) GetProjectsOk() ([]ProjectsDataProjects, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectsData) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectsDataProjects and assigns it to the Projects field.
func (o *ProjectsData) SetProjects(v []ProjectsDataProjects) {
	o.Projects = v
}

func (o ProjectsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return toSerialize, nil
}

type NullableProjectsData struct {
	value *ProjectsData
	isSet bool
}

func (v NullableProjectsData) Get() *ProjectsData {
	return v.value
}

func (v *NullableProjectsData) Set(val *ProjectsData) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsData) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsData(val *ProjectsData) *NullableProjectsData {
	return &NullableProjectsData{value: val, isSet: true}
}

func (v NullableProjectsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


