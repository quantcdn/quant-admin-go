/*
QuantCDN Dashboard API

Provides programmatic interface for projects within QuantCDN

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectConfig{}

// ProjectConfig struct for ProjectConfig
type ProjectConfig struct {
	QueryParamsEnabled *bool `json:"query_params_enabled,omitempty"`
	SearchEnabled *bool `json:"search_enabled,omitempty"`
}

// NewProjectConfig instantiates a new ProjectConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectConfig() *ProjectConfig {
	this := ProjectConfig{}
	return &this
}

// NewProjectConfigWithDefaults instantiates a new ProjectConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectConfigWithDefaults() *ProjectConfig {
	this := ProjectConfig{}
	return &this
}

// GetQueryParamsEnabled returns the QueryParamsEnabled field value if set, zero value otherwise.
func (o *ProjectConfig) GetQueryParamsEnabled() bool {
	if o == nil || IsNil(o.QueryParamsEnabled) {
		var ret bool
		return ret
	}
	return *o.QueryParamsEnabled
}

// GetQueryParamsEnabledOk returns a tuple with the QueryParamsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectConfig) GetQueryParamsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.QueryParamsEnabled) {
		return nil, false
	}
	return o.QueryParamsEnabled, true
}

// HasQueryParamsEnabled returns a boolean if a field has been set.
func (o *ProjectConfig) HasQueryParamsEnabled() bool {
	if o != nil && !IsNil(o.QueryParamsEnabled) {
		return true
	}

	return false
}

// SetQueryParamsEnabled gets a reference to the given bool and assigns it to the QueryParamsEnabled field.
func (o *ProjectConfig) SetQueryParamsEnabled(v bool) {
	o.QueryParamsEnabled = &v
}

// GetSearchEnabled returns the SearchEnabled field value if set, zero value otherwise.
func (o *ProjectConfig) GetSearchEnabled() bool {
	if o == nil || IsNil(o.SearchEnabled) {
		var ret bool
		return ret
	}
	return *o.SearchEnabled
}

// GetSearchEnabledOk returns a tuple with the SearchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectConfig) GetSearchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SearchEnabled) {
		return nil, false
	}
	return o.SearchEnabled, true
}

// HasSearchEnabled returns a boolean if a field has been set.
func (o *ProjectConfig) HasSearchEnabled() bool {
	if o != nil && !IsNil(o.SearchEnabled) {
		return true
	}

	return false
}

// SetSearchEnabled gets a reference to the given bool and assigns it to the SearchEnabled field.
func (o *ProjectConfig) SetSearchEnabled(v bool) {
	o.SearchEnabled = &v
}

func (o ProjectConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryParamsEnabled) {
		toSerialize["query_params_enabled"] = o.QueryParamsEnabled
	}
	if !IsNil(o.SearchEnabled) {
		toSerialize["search_enabled"] = o.SearchEnabled
	}
	return toSerialize, nil
}

type NullableProjectConfig struct {
	value *ProjectConfig
	isSet bool
}

func (v NullableProjectConfig) Get() *ProjectConfig {
	return v.value
}

func (v *NullableProjectConfig) Set(val *ProjectConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectConfig(val *ProjectConfig) *NullableProjectConfig {
	return &NullableProjectConfig{value: val, isSet: true}
}

func (v NullableProjectConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


