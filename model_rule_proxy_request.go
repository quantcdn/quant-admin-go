/*
QuantCDN Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RuleProxyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleProxyRequest{}

// RuleProxyRequest struct for RuleProxyRequest
type RuleProxyRequest struct {
	Domain string `json:"domain"`
	Name *string `json:"name,omitempty"`
	Disabled bool `json:"disabled"`
	Url string `json:"url"`
	Country *string `json:"country,omitempty"`
	CountryIs []string `json:"country_is,omitempty"`
	CountryIsNot []string `json:"country_is_not,omitempty"`
	Method *string `json:"method,omitempty"`
	MethodIs []string `json:"method_is,omitempty"`
	MethodIsNot []string `json:"method_is_not,omitempty"`
	Ip *string `json:"ip,omitempty"`
	IpIs []string `json:"ip_is,omitempty"`
	IpIsNot []string `json:"ip_is_not,omitempty"`
	OnlyWithCookie *bool `json:"only_with_cookie,omitempty"`
	CookieName *string `json:"cookie_name,omitempty"`
	To string `json:"to"`
	Host *string `json:"host,omitempty"`
	AuthUser *string `json:"auth_user,omitempty"`
	AuthPass *string `json:"auth_pass,omitempty"`
	DisableSslVerify *bool `json:"disable_ssl_verify,omitempty"`
	CacheLifetime *int32 `json:"cache_lifetime,omitempty"`
	OnlyProxy404 *bool `json:"only_proxy_404,omitempty"`
	InjectHeaders *map[string]string `json:"inject_headers,omitempty"`
	StripHeaders []string `json:"strip_headers,omitempty"`
	StripResponseHeaders []string `json:"strip_response_headers,omitempty"`
	FailoverMode *bool `json:"failover_mode,omitempty"`
	FailoverOriginTtfb *int32 `json:"failover_origin_ttfb,omitempty"`
	FailoverOriginStatusCode []string `json:"failover_origin_status_code,omitempty"`
	FailoverLifetime *int32 `json:"failover_lifetime,omitempty"`
	Notify *string `json:"notify,omitempty"`
	NotifyConfig *ProxyNotifyConfig `json:"notify_config,omitempty"`
	WafEnabled *bool `json:"waf_enabled,omitempty"`
	WafConfig *RuleWAFConfig `json:"waf_config,omitempty"`
}

type _RuleProxyRequest RuleProxyRequest

// NewRuleProxyRequest instantiates a new RuleProxyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleProxyRequest(domain string, disabled bool, url string, to string) *RuleProxyRequest {
	this := RuleProxyRequest{}
	this.Domain = domain
	this.Disabled = disabled
	this.Url = url
	var onlyWithCookie bool = false
	this.OnlyWithCookie = &onlyWithCookie
	this.To = to
	var failoverOriginTtfb int32 = 2000
	this.FailoverOriginTtfb = &failoverOriginTtfb
	var notify string = "none"
	this.Notify = &notify
	var wafEnabled bool = false
	this.WafEnabled = &wafEnabled
	return &this
}

// NewRuleProxyRequestWithDefaults instantiates a new RuleProxyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleProxyRequestWithDefaults() *RuleProxyRequest {
	this := RuleProxyRequest{}
	var domain string = "any"
	this.Domain = domain
	var disabled bool = false
	this.Disabled = disabled
	var onlyWithCookie bool = false
	this.OnlyWithCookie = &onlyWithCookie
	var failoverOriginTtfb int32 = 2000
	this.FailoverOriginTtfb = &failoverOriginTtfb
	var notify string = "none"
	this.Notify = &notify
	var wafEnabled bool = false
	this.WafEnabled = &wafEnabled
	return &this
}

// GetDomain returns the Domain field value
func (o *RuleProxyRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *RuleProxyRequest) SetDomain(v string) {
	o.Domain = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RuleProxyRequest) SetName(v string) {
	o.Name = &v
}

// GetDisabled returns the Disabled field value
func (o *RuleProxyRequest) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *RuleProxyRequest) SetDisabled(v bool) {
	o.Disabled = v
}

// GetUrl returns the Url field value
func (o *RuleProxyRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RuleProxyRequest) SetUrl(v string) {
	o.Url = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *RuleProxyRequest) SetCountry(v string) {
	o.Country = &v
}

// GetCountryIs returns the CountryIs field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetCountryIs() []string {
	if o == nil || IsNil(o.CountryIs) {
		var ret []string
		return ret
	}
	return o.CountryIs
}

// GetCountryIsOk returns a tuple with the CountryIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetCountryIsOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryIs) {
		return nil, false
	}
	return o.CountryIs, true
}

// HasCountryIs returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasCountryIs() bool {
	if o != nil && !IsNil(o.CountryIs) {
		return true
	}

	return false
}

// SetCountryIs gets a reference to the given []string and assigns it to the CountryIs field.
func (o *RuleProxyRequest) SetCountryIs(v []string) {
	o.CountryIs = v
}

// GetCountryIsNot returns the CountryIsNot field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetCountryIsNot() []string {
	if o == nil || IsNil(o.CountryIsNot) {
		var ret []string
		return ret
	}
	return o.CountryIsNot
}

// GetCountryIsNotOk returns a tuple with the CountryIsNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetCountryIsNotOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryIsNot) {
		return nil, false
	}
	return o.CountryIsNot, true
}

// HasCountryIsNot returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasCountryIsNot() bool {
	if o != nil && !IsNil(o.CountryIsNot) {
		return true
	}

	return false
}

// SetCountryIsNot gets a reference to the given []string and assigns it to the CountryIsNot field.
func (o *RuleProxyRequest) SetCountryIsNot(v []string) {
	o.CountryIsNot = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *RuleProxyRequest) SetMethod(v string) {
	o.Method = &v
}

// GetMethodIs returns the MethodIs field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetMethodIs() []string {
	if o == nil || IsNil(o.MethodIs) {
		var ret []string
		return ret
	}
	return o.MethodIs
}

// GetMethodIsOk returns a tuple with the MethodIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetMethodIsOk() ([]string, bool) {
	if o == nil || IsNil(o.MethodIs) {
		return nil, false
	}
	return o.MethodIs, true
}

// HasMethodIs returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasMethodIs() bool {
	if o != nil && !IsNil(o.MethodIs) {
		return true
	}

	return false
}

// SetMethodIs gets a reference to the given []string and assigns it to the MethodIs field.
func (o *RuleProxyRequest) SetMethodIs(v []string) {
	o.MethodIs = v
}

// GetMethodIsNot returns the MethodIsNot field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetMethodIsNot() []string {
	if o == nil || IsNil(o.MethodIsNot) {
		var ret []string
		return ret
	}
	return o.MethodIsNot
}

// GetMethodIsNotOk returns a tuple with the MethodIsNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetMethodIsNotOk() ([]string, bool) {
	if o == nil || IsNil(o.MethodIsNot) {
		return nil, false
	}
	return o.MethodIsNot, true
}

// HasMethodIsNot returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasMethodIsNot() bool {
	if o != nil && !IsNil(o.MethodIsNot) {
		return true
	}

	return false
}

// SetMethodIsNot gets a reference to the given []string and assigns it to the MethodIsNot field.
func (o *RuleProxyRequest) SetMethodIsNot(v []string) {
	o.MethodIsNot = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *RuleProxyRequest) SetIp(v string) {
	o.Ip = &v
}

// GetIpIs returns the IpIs field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetIpIs() []string {
	if o == nil || IsNil(o.IpIs) {
		var ret []string
		return ret
	}
	return o.IpIs
}

// GetIpIsOk returns a tuple with the IpIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetIpIsOk() ([]string, bool) {
	if o == nil || IsNil(o.IpIs) {
		return nil, false
	}
	return o.IpIs, true
}

// HasIpIs returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasIpIs() bool {
	if o != nil && !IsNil(o.IpIs) {
		return true
	}

	return false
}

// SetIpIs gets a reference to the given []string and assigns it to the IpIs field.
func (o *RuleProxyRequest) SetIpIs(v []string) {
	o.IpIs = v
}

// GetIpIsNot returns the IpIsNot field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetIpIsNot() []string {
	if o == nil || IsNil(o.IpIsNot) {
		var ret []string
		return ret
	}
	return o.IpIsNot
}

// GetIpIsNotOk returns a tuple with the IpIsNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetIpIsNotOk() ([]string, bool) {
	if o == nil || IsNil(o.IpIsNot) {
		return nil, false
	}
	return o.IpIsNot, true
}

// HasIpIsNot returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasIpIsNot() bool {
	if o != nil && !IsNil(o.IpIsNot) {
		return true
	}

	return false
}

// SetIpIsNot gets a reference to the given []string and assigns it to the IpIsNot field.
func (o *RuleProxyRequest) SetIpIsNot(v []string) {
	o.IpIsNot = v
}

// GetOnlyWithCookie returns the OnlyWithCookie field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetOnlyWithCookie() bool {
	if o == nil || IsNil(o.OnlyWithCookie) {
		var ret bool
		return ret
	}
	return *o.OnlyWithCookie
}

// GetOnlyWithCookieOk returns a tuple with the OnlyWithCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetOnlyWithCookieOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyWithCookie) {
		return nil, false
	}
	return o.OnlyWithCookie, true
}

// HasOnlyWithCookie returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasOnlyWithCookie() bool {
	if o != nil && !IsNil(o.OnlyWithCookie) {
		return true
	}

	return false
}

// SetOnlyWithCookie gets a reference to the given bool and assigns it to the OnlyWithCookie field.
func (o *RuleProxyRequest) SetOnlyWithCookie(v bool) {
	o.OnlyWithCookie = &v
}

// GetCookieName returns the CookieName field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetCookieName() string {
	if o == nil || IsNil(o.CookieName) {
		var ret string
		return ret
	}
	return *o.CookieName
}

// GetCookieNameOk returns a tuple with the CookieName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetCookieNameOk() (*string, bool) {
	if o == nil || IsNil(o.CookieName) {
		return nil, false
	}
	return o.CookieName, true
}

// HasCookieName returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasCookieName() bool {
	if o != nil && !IsNil(o.CookieName) {
		return true
	}

	return false
}

// SetCookieName gets a reference to the given string and assigns it to the CookieName field.
func (o *RuleProxyRequest) SetCookieName(v string) {
	o.CookieName = &v
}

// GetTo returns the To field value
func (o *RuleProxyRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *RuleProxyRequest) SetTo(v string) {
	o.To = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RuleProxyRequest) SetHost(v string) {
	o.Host = &v
}

// GetAuthUser returns the AuthUser field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetAuthUser() string {
	if o == nil || IsNil(o.AuthUser) {
		var ret string
		return ret
	}
	return *o.AuthUser
}

// GetAuthUserOk returns a tuple with the AuthUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetAuthUserOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUser) {
		return nil, false
	}
	return o.AuthUser, true
}

// HasAuthUser returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasAuthUser() bool {
	if o != nil && !IsNil(o.AuthUser) {
		return true
	}

	return false
}

// SetAuthUser gets a reference to the given string and assigns it to the AuthUser field.
func (o *RuleProxyRequest) SetAuthUser(v string) {
	o.AuthUser = &v
}

// GetAuthPass returns the AuthPass field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetAuthPass() string {
	if o == nil || IsNil(o.AuthPass) {
		var ret string
		return ret
	}
	return *o.AuthPass
}

// GetAuthPassOk returns a tuple with the AuthPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetAuthPassOk() (*string, bool) {
	if o == nil || IsNil(o.AuthPass) {
		return nil, false
	}
	return o.AuthPass, true
}

// HasAuthPass returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasAuthPass() bool {
	if o != nil && !IsNil(o.AuthPass) {
		return true
	}

	return false
}

// SetAuthPass gets a reference to the given string and assigns it to the AuthPass field.
func (o *RuleProxyRequest) SetAuthPass(v string) {
	o.AuthPass = &v
}

// GetDisableSslVerify returns the DisableSslVerify field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetDisableSslVerify() bool {
	if o == nil || IsNil(o.DisableSslVerify) {
		var ret bool
		return ret
	}
	return *o.DisableSslVerify
}

// GetDisableSslVerifyOk returns a tuple with the DisableSslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetDisableSslVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableSslVerify) {
		return nil, false
	}
	return o.DisableSslVerify, true
}

// HasDisableSslVerify returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasDisableSslVerify() bool {
	if o != nil && !IsNil(o.DisableSslVerify) {
		return true
	}

	return false
}

// SetDisableSslVerify gets a reference to the given bool and assigns it to the DisableSslVerify field.
func (o *RuleProxyRequest) SetDisableSslVerify(v bool) {
	o.DisableSslVerify = &v
}

// GetCacheLifetime returns the CacheLifetime field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetCacheLifetime() int32 {
	if o == nil || IsNil(o.CacheLifetime) {
		var ret int32
		return ret
	}
	return *o.CacheLifetime
}

// GetCacheLifetimeOk returns a tuple with the CacheLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetCacheLifetimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CacheLifetime) {
		return nil, false
	}
	return o.CacheLifetime, true
}

// HasCacheLifetime returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasCacheLifetime() bool {
	if o != nil && !IsNil(o.CacheLifetime) {
		return true
	}

	return false
}

// SetCacheLifetime gets a reference to the given int32 and assigns it to the CacheLifetime field.
func (o *RuleProxyRequest) SetCacheLifetime(v int32) {
	o.CacheLifetime = &v
}

// GetOnlyProxy404 returns the OnlyProxy404 field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetOnlyProxy404() bool {
	if o == nil || IsNil(o.OnlyProxy404) {
		var ret bool
		return ret
	}
	return *o.OnlyProxy404
}

// GetOnlyProxy404Ok returns a tuple with the OnlyProxy404 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetOnlyProxy404Ok() (*bool, bool) {
	if o == nil || IsNil(o.OnlyProxy404) {
		return nil, false
	}
	return o.OnlyProxy404, true
}

// HasOnlyProxy404 returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasOnlyProxy404() bool {
	if o != nil && !IsNil(o.OnlyProxy404) {
		return true
	}

	return false
}

// SetOnlyProxy404 gets a reference to the given bool and assigns it to the OnlyProxy404 field.
func (o *RuleProxyRequest) SetOnlyProxy404(v bool) {
	o.OnlyProxy404 = &v
}

// GetInjectHeaders returns the InjectHeaders field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetInjectHeaders() map[string]string {
	if o == nil || IsNil(o.InjectHeaders) {
		var ret map[string]string
		return ret
	}
	return *o.InjectHeaders
}

// GetInjectHeadersOk returns a tuple with the InjectHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetInjectHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.InjectHeaders) {
		return nil, false
	}
	return o.InjectHeaders, true
}

// HasInjectHeaders returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasInjectHeaders() bool {
	if o != nil && !IsNil(o.InjectHeaders) {
		return true
	}

	return false
}

// SetInjectHeaders gets a reference to the given map[string]string and assigns it to the InjectHeaders field.
func (o *RuleProxyRequest) SetInjectHeaders(v map[string]string) {
	o.InjectHeaders = &v
}

// GetStripHeaders returns the StripHeaders field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetStripHeaders() []string {
	if o == nil || IsNil(o.StripHeaders) {
		var ret []string
		return ret
	}
	return o.StripHeaders
}

// GetStripHeadersOk returns a tuple with the StripHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetStripHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.StripHeaders) {
		return nil, false
	}
	return o.StripHeaders, true
}

// HasStripHeaders returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasStripHeaders() bool {
	if o != nil && !IsNil(o.StripHeaders) {
		return true
	}

	return false
}

// SetStripHeaders gets a reference to the given []string and assigns it to the StripHeaders field.
func (o *RuleProxyRequest) SetStripHeaders(v []string) {
	o.StripHeaders = v
}

// GetStripResponseHeaders returns the StripResponseHeaders field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetStripResponseHeaders() []string {
	if o == nil || IsNil(o.StripResponseHeaders) {
		var ret []string
		return ret
	}
	return o.StripResponseHeaders
}

// GetStripResponseHeadersOk returns a tuple with the StripResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetStripResponseHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.StripResponseHeaders) {
		return nil, false
	}
	return o.StripResponseHeaders, true
}

// HasStripResponseHeaders returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasStripResponseHeaders() bool {
	if o != nil && !IsNil(o.StripResponseHeaders) {
		return true
	}

	return false
}

// SetStripResponseHeaders gets a reference to the given []string and assigns it to the StripResponseHeaders field.
func (o *RuleProxyRequest) SetStripResponseHeaders(v []string) {
	o.StripResponseHeaders = v
}

// GetFailoverMode returns the FailoverMode field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetFailoverMode() bool {
	if o == nil || IsNil(o.FailoverMode) {
		var ret bool
		return ret
	}
	return *o.FailoverMode
}

// GetFailoverModeOk returns a tuple with the FailoverMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetFailoverModeOk() (*bool, bool) {
	if o == nil || IsNil(o.FailoverMode) {
		return nil, false
	}
	return o.FailoverMode, true
}

// HasFailoverMode returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasFailoverMode() bool {
	if o != nil && !IsNil(o.FailoverMode) {
		return true
	}

	return false
}

// SetFailoverMode gets a reference to the given bool and assigns it to the FailoverMode field.
func (o *RuleProxyRequest) SetFailoverMode(v bool) {
	o.FailoverMode = &v
}

// GetFailoverOriginTtfb returns the FailoverOriginTtfb field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetFailoverOriginTtfb() int32 {
	if o == nil || IsNil(o.FailoverOriginTtfb) {
		var ret int32
		return ret
	}
	return *o.FailoverOriginTtfb
}

// GetFailoverOriginTtfbOk returns a tuple with the FailoverOriginTtfb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetFailoverOriginTtfbOk() (*int32, bool) {
	if o == nil || IsNil(o.FailoverOriginTtfb) {
		return nil, false
	}
	return o.FailoverOriginTtfb, true
}

// HasFailoverOriginTtfb returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasFailoverOriginTtfb() bool {
	if o != nil && !IsNil(o.FailoverOriginTtfb) {
		return true
	}

	return false
}

// SetFailoverOriginTtfb gets a reference to the given int32 and assigns it to the FailoverOriginTtfb field.
func (o *RuleProxyRequest) SetFailoverOriginTtfb(v int32) {
	o.FailoverOriginTtfb = &v
}

// GetFailoverOriginStatusCode returns the FailoverOriginStatusCode field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetFailoverOriginStatusCode() []string {
	if o == nil || IsNil(o.FailoverOriginStatusCode) {
		var ret []string
		return ret
	}
	return o.FailoverOriginStatusCode
}

// GetFailoverOriginStatusCodeOk returns a tuple with the FailoverOriginStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetFailoverOriginStatusCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.FailoverOriginStatusCode) {
		return nil, false
	}
	return o.FailoverOriginStatusCode, true
}

// HasFailoverOriginStatusCode returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasFailoverOriginStatusCode() bool {
	if o != nil && !IsNil(o.FailoverOriginStatusCode) {
		return true
	}

	return false
}

// SetFailoverOriginStatusCode gets a reference to the given []string and assigns it to the FailoverOriginStatusCode field.
func (o *RuleProxyRequest) SetFailoverOriginStatusCode(v []string) {
	o.FailoverOriginStatusCode = v
}

// GetFailoverLifetime returns the FailoverLifetime field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetFailoverLifetime() int32 {
	if o == nil || IsNil(o.FailoverLifetime) {
		var ret int32
		return ret
	}
	return *o.FailoverLifetime
}

// GetFailoverLifetimeOk returns a tuple with the FailoverLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetFailoverLifetimeOk() (*int32, bool) {
	if o == nil || IsNil(o.FailoverLifetime) {
		return nil, false
	}
	return o.FailoverLifetime, true
}

// HasFailoverLifetime returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasFailoverLifetime() bool {
	if o != nil && !IsNil(o.FailoverLifetime) {
		return true
	}

	return false
}

// SetFailoverLifetime gets a reference to the given int32 and assigns it to the FailoverLifetime field.
func (o *RuleProxyRequest) SetFailoverLifetime(v int32) {
	o.FailoverLifetime = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetNotify() string {
	if o == nil || IsNil(o.Notify) {
		var ret string
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetNotifyOk() (*string, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given string and assigns it to the Notify field.
func (o *RuleProxyRequest) SetNotify(v string) {
	o.Notify = &v
}

// GetNotifyConfig returns the NotifyConfig field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetNotifyConfig() ProxyNotifyConfig {
	if o == nil || IsNil(o.NotifyConfig) {
		var ret ProxyNotifyConfig
		return ret
	}
	return *o.NotifyConfig
}

// GetNotifyConfigOk returns a tuple with the NotifyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetNotifyConfigOk() (*ProxyNotifyConfig, bool) {
	if o == nil || IsNil(o.NotifyConfig) {
		return nil, false
	}
	return o.NotifyConfig, true
}

// HasNotifyConfig returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasNotifyConfig() bool {
	if o != nil && !IsNil(o.NotifyConfig) {
		return true
	}

	return false
}

// SetNotifyConfig gets a reference to the given ProxyNotifyConfig and assigns it to the NotifyConfig field.
func (o *RuleProxyRequest) SetNotifyConfig(v ProxyNotifyConfig) {
	o.NotifyConfig = &v
}

// GetWafEnabled returns the WafEnabled field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetWafEnabled() bool {
	if o == nil || IsNil(o.WafEnabled) {
		var ret bool
		return ret
	}
	return *o.WafEnabled
}

// GetWafEnabledOk returns a tuple with the WafEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetWafEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WafEnabled) {
		return nil, false
	}
	return o.WafEnabled, true
}

// HasWafEnabled returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasWafEnabled() bool {
	if o != nil && !IsNil(o.WafEnabled) {
		return true
	}

	return false
}

// SetWafEnabled gets a reference to the given bool and assigns it to the WafEnabled field.
func (o *RuleProxyRequest) SetWafEnabled(v bool) {
	o.WafEnabled = &v
}

// GetWafConfig returns the WafConfig field value if set, zero value otherwise.
func (o *RuleProxyRequest) GetWafConfig() RuleWAFConfig {
	if o == nil || IsNil(o.WafConfig) {
		var ret RuleWAFConfig
		return ret
	}
	return *o.WafConfig
}

// GetWafConfigOk returns a tuple with the WafConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleProxyRequest) GetWafConfigOk() (*RuleWAFConfig, bool) {
	if o == nil || IsNil(o.WafConfig) {
		return nil, false
	}
	return o.WafConfig, true
}

// HasWafConfig returns a boolean if a field has been set.
func (o *RuleProxyRequest) HasWafConfig() bool {
	if o != nil && !IsNil(o.WafConfig) {
		return true
	}

	return false
}

// SetWafConfig gets a reference to the given RuleWAFConfig and assigns it to the WafConfig field.
func (o *RuleProxyRequest) SetWafConfig(v RuleWAFConfig) {
	o.WafConfig = &v
}

func (o RuleProxyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleProxyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["disabled"] = o.Disabled
	toSerialize["url"] = o.Url
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountryIs) {
		toSerialize["country_is"] = o.CountryIs
	}
	if !IsNil(o.CountryIsNot) {
		toSerialize["country_is_not"] = o.CountryIsNot
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.MethodIs) {
		toSerialize["method_is"] = o.MethodIs
	}
	if !IsNil(o.MethodIsNot) {
		toSerialize["method_is_not"] = o.MethodIsNot
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IpIs) {
		toSerialize["ip_is"] = o.IpIs
	}
	if !IsNil(o.IpIsNot) {
		toSerialize["ip_is_not"] = o.IpIsNot
	}
	if !IsNil(o.OnlyWithCookie) {
		toSerialize["only_with_cookie"] = o.OnlyWithCookie
	}
	if !IsNil(o.CookieName) {
		toSerialize["cookie_name"] = o.CookieName
	}
	toSerialize["to"] = o.To
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.AuthUser) {
		toSerialize["auth_user"] = o.AuthUser
	}
	if !IsNil(o.AuthPass) {
		toSerialize["auth_pass"] = o.AuthPass
	}
	if !IsNil(o.DisableSslVerify) {
		toSerialize["disable_ssl_verify"] = o.DisableSslVerify
	}
	if !IsNil(o.CacheLifetime) {
		toSerialize["cache_lifetime"] = o.CacheLifetime
	}
	if !IsNil(o.OnlyProxy404) {
		toSerialize["only_proxy_404"] = o.OnlyProxy404
	}
	if !IsNil(o.InjectHeaders) {
		toSerialize["inject_headers"] = o.InjectHeaders
	}
	if !IsNil(o.StripHeaders) {
		toSerialize["strip_headers"] = o.StripHeaders
	}
	if !IsNil(o.StripResponseHeaders) {
		toSerialize["strip_response_headers"] = o.StripResponseHeaders
	}
	if !IsNil(o.FailoverMode) {
		toSerialize["failover_mode"] = o.FailoverMode
	}
	if !IsNil(o.FailoverOriginTtfb) {
		toSerialize["failover_origin_ttfb"] = o.FailoverOriginTtfb
	}
	if !IsNil(o.FailoverOriginStatusCode) {
		toSerialize["failover_origin_status_code"] = o.FailoverOriginStatusCode
	}
	if !IsNil(o.FailoverLifetime) {
		toSerialize["failover_lifetime"] = o.FailoverLifetime
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.NotifyConfig) {
		toSerialize["notify_config"] = o.NotifyConfig
	}
	if !IsNil(o.WafEnabled) {
		toSerialize["waf_enabled"] = o.WafEnabled
	}
	if !IsNil(o.WafConfig) {
		toSerialize["waf_config"] = o.WafConfig
	}
	return toSerialize, nil
}

func (o *RuleProxyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"disabled",
		"url",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleProxyRequest := _RuleProxyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRuleProxyRequest)

	if err != nil {
		return err
	}

	*o = RuleProxyRequest(varRuleProxyRequest)

	return err
}

type NullableRuleProxyRequest struct {
	value *RuleProxyRequest
	isSet bool
}

func (v NullableRuleProxyRequest) Get() *RuleProxyRequest {
	return v.value
}

func (v *NullableRuleProxyRequest) Set(val *RuleProxyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleProxyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleProxyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleProxyRequest(val *RuleProxyRequest) *NullableRuleProxyRequest {
	return &NullableRuleProxyRequest{value: val, isSet: true}
}

func (v NullableRuleProxyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleProxyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


